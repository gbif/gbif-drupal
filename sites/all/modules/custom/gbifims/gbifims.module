<?php

/**
* @defgroup  Cron
* @ingroup GBIF
*/

// It won't autoload files from .info UNLESS they contain class defs.
module_load_include( 'inc', 'gbifims', 'gbifims.filemaker') ;

/**
* Implements hook_menu().
*
*/
function gbifims_menu() {
	$items['admin/config/gbifims/settings'] = array(
			'title' => 'GBIF IMS data settings',
			'description' => 'Control the import of various IMS data',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('gbifims_form'),
			'access arguments' => array('administer site configuration'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'gbifims.admin.inc',
			);

	return $items;

}

/**
* Implements hook_entity_info_alter().
*
* @todo Remove this when the testbot can properly pick up dependencies
* for contrib modules.
*/
function gbifims_entity_info_alter(&$info) {
	if (isset($info['taxonomy_term'])) {
		$info['taxonomy_term']['token type'] = 'term';
	}
	if (isset($info['taxonomy_vocabulary'])) {
		$info['taxonomy_vocabulary']['token type'] = 'vocabulary';
	}
} 

/**
 * Implements hook_token_info().
 */
function gbifims_token_info() {
	$types['gbifims'] = array(
		'name' => t("GBIF IMS tokens"),
		'description' => t("Tokens for various GBIF IMS"),
	);

	$gbifims['BCList'] = array(
		'name' => t("BCList"),
		'description' => t("Tabular listing of the EC"),
	);
	$gbifims['ECList'] = array(
		'name' => t("ECList"),
		'description' => t("Tabular listing of the BC"),
	);
	$gbifims['NCList'] = array(
		'name' => t("NCList"),
		'description' => t("Tabular listing of the EC"),
	);
	$gbifims['RCList'] = array(
		'name' => t("RCList"),
		'description' => t("Tabular listing of the BC"),
	);
	$gbifims['SCList'] = array(
		'name' => t("SCList"),
		'description' => t("Tabular listing of the BC"),
	);
	$gbifims['NSGList'] = array(
		'name' => t("NSGList"),
		'description' => t("Tabular listing of the BC"),
	);
	$gbifims['GBSList'] = array(
		'name' => t("GBSList"),
		'description' => t("Tabular listing of the BC"),
	);	
	$gbifims['VPList'] = array(
		'name' => t("VPList"),
		'description' => t("Tabular listing of GBIF voting participants"),
	);
	$gbifims['APList'] = array(
		'name' => t("APList"),
		'description' => t("Tabular listing of GBIF associate participants"),
	);	
	$gbifims['APOList'] = array(
		'name' => t("APoList"),
		'description' => t("Tabular listing of the assiciate participants organizations"),
	);	
  return array(
    'types' => $types,
    'tokens' => array(
      'gbifims' => $gbifims,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function gbifims_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $user;

	$replacements = array();
  
  if ($type == 'gbifims') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'BCList':
					$replacements[$original] = _gbifims_get_CommitteeList('Budget Committee');
					break;
        case 'ECList':
					$replacements[$original] = _gbifims_get_CommitteeList('Executive Committee');
					break;
        case 'NCList':
					$replacements[$original] = _gbifims_get_NCList();
					break;
        case 'RCList':
					$replacements[$original] = _gbifims_get_CommitteeList('Rules Committee');
					break;
        case 'SCList':
					$replacements[$original] = _gbifims_get_CommitteeList('Science Committee');
					break;
        case 'NSGList':
					$replacements[$original] = _gbifims_get_CommitteeList('Nodes Steering Group');
					break;
				case 'GBSList':
					$replacements[$original] = _gbifims_get_SecretariatList('GBIF Secretariat');
					break;
        case 'VPList':
					$replacements[$original] = _gbifims_get_ParticipantsList('Voting Participant');
					break;
				case 'ACPList':
					$replacements[$original] = _gbifims_get_ParticipantsList('Associate Country Participant');
					break;
				case 'OAPList':
					$replacements[$original] = _gbifims_get_ParticipantsList('Other Associate Participant');
					break;
      }
    }
  }
  
  return $replacements;
}


/**
* Implements hook_libraries info().
*
* This is the proper way to load an external libary
*
*
*/
function gbifims_libraries_info() {
	$libraries['filemaker'] = array(
	    // Only used in administrative UI of Libraries API.
		'name' => 'filemaker', 
		'vendor url' => 'http://www.filemaker.com', 
		// rather than implement yet anothe hook just code version for FileMaker 11
		'version' => '11', 
		'files' => array(
			'php' => array('db.class.php',),
			),
		// Optional: Register files to auto-load for your module. All files must be
		// keyed by module, and follow the syntax of the 'files' property. 
		'integration files' => array(
			'' => array(
				'php' => array('db.class.php'),
				),
			),

	);
	return $libraries ;
}


/**
* Implements hook_cron().
*
* hook_cron() is the traditional (pre-Drupal 7) hook for doing "background"
* processing. It gets called every time the Drupal cron runs and must decide
* what it will do.
*
*/
function gbifims_cron() {
	// Default to an hourly interval. Of course, cron has to be running at least
	// hourly for this to work.
	$interval = variable_get('_interval', 60*60);
	// We usually don't want to act every time cron runs (which could be every
	// minute) so keep a time for the next run in a variable.
//	if (time() >= variable_get('_next_execution', 0)) {
		watchdog('', ' ran');
		if (!empty($GLOBALS['_show_status_message'])) {
			drupal_set_message(t(' executed at %time', array('%time' => date_iso8601(time(0)))));
		}
		// variable_set('_next_execution', time() + $interval);
//	}
}

/**
* Implements hook_cron_queue_info().
*
* All the details of queue use are done by the cron_queue implementation, so
* one doesn't need to know much about DrupalQueue().
*
* 
*/
function gbifims_cron_queue_info() {
	$queues['gbifims_queue_1'] = array(
		'worker callback' => 'gbifims_queue_1_worker',
		'time' => 120, // Seconds max runtime per cron run.
		);
	$queues['gbifims_queue_2'] = array(
		'worker callback' => 'gbifims_queue_2_worker',
		'time' => 100,
		);
	
	return $queues;
}

/**
* Simple workers for the two queues.
*
* @param $item
* Any object to be worked on.
*/
function gbifims_queue_1_worker($item) {
	if (($library = libraries_load('filemaker')) && !empty($library['loaded'])) {
		_gbifims_doContact() ;
		_gbifims_doGroup() ;
		_gbifims_doGrouprole() ;
		_gbifims_ContactGrouproleNodeParticipant () ;
		_gbifims_doCountry() ;
		_gbifims_doInstitution () ;
		_gbifims_doNode () ;
		_gbifims_doParticipant () ;
		_gbifims_doGBIFarea () ;
	}

}


function gbifims_queue_2_worker($item) {
	gbifims_queue_report_work(2, $item);
}

/**
* Simple reporter for the workers.
*
* @param $worker
* (integer) worker number
* @param $item
* (object) the $item which was stored in the cron queue.
*/
function gbifims_queue_report_work($worker, $item, $message='') {
	if (!empty($GLOBALS['_show_status_message'])) {
		drupal_set_message(t('<div>'.$message.'</div><div>Queue @worker worker processed item with sequence @sequence created at @time</div>', array('@worker' => $worker, '@sequence' => $item->sequence, '@time' => date_iso8601($item->created))));
	}
	
	watchdog('', '<div>'.$message.'</div><div>Queue @worker worker processed item with sequence @sequence created at @time</div>', array('@worker' => $worker, '@sequence' => $item->sequence, '@time' => date_iso8601($item->created)));
}
