<?php
/**
 * @file
 * Code for the GBIF Data use feature.
 */

include_once 'gbif_data_use.features.inc';

/**
 * Implements hook_theme().
 */
function gbif_data_use_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'gbif_data_use');
  return array(
    'node__data_use' => array(
      'template' => 'node--data-use',
      'path' => $path . '/theme',
    ),
    'node__view__data_use' => array(
      'template' => 'node--view--data-use',
      'path' => $path . '/theme',
    ),
    'node__view__data_use__page' => array(
      'template' => 'node--view--data-use--page',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implements hook_page_build().
 */
function gbif_data_use_page_build(&$page) {
  // determine title and slogan in banner
  if (strpos(current_path(), 'newsroom/uses') !== FALSE) {
    $page['highlighted_title'] = array(
      'name' => 'GBIF Newsroom',
      'description' => 'News and events from around the GBIF community',
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gbif_data_use_form_data_use_node_form_alter(&$form, &$form_state) {
  $form['field_legacy_nid']['#disabled'] = TRUE;
}

/**
 * Implements hook_preprocess_page().
 * @param $variables
 */
function gbif_data_use_preprocess_page(&$variables) {
  $path_to_highlight = 'newsroom/uses/summary';
  // Detect the URLs that needs "Uses of data" highlighted.
  // Note that for the block to be available, "data_use_node_menu" context is required.
  if (isset($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs'])) {
    // for individual content node that is typed "data_use",
    // or the view with path as "/newsroom/uses"
    if ((isset($variables['node']) && $variables['node']->type == 'data_use') || strpos(current_path(), 'newsroom/uses') !== FALSE) {
      // find the registered menu item and add the "active" CSS class to the attributes
      foreach ($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'] as $k => $tab) {
        if (gettype($k) == 'integer') {
          if ($tab['#href'] == $path_to_highlight) {
            // make it active
            array_push($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'][$k]['#attributes']['class'], 'active');
            watchdog('gbif_data_use', 'Active menu item set for data use node.', NULL, WATCHDOG_DEBUG);
          }
        }
      }
    }
  }
}


/**
 * Implements hook_preprocess_views_view_list().
 * @param $variables
 */
function gbif_data_use_preprocess_views_view_list(&$variables) {
  switch ($variables['view']->name) {
    case 'data_use':
      foreach ($variables['classes'] as $k => $class) {
        $odr = $k + 1;
        if ($odr % 3 === 0) {
          $variables['classes_array'][$k] = $variables['classes_array'][$k] . ' views-row-right';
        }
      }
      break;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function gbif_data_use_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'gbif_data_use');
  $theme_registry['views_view__data_use__page']['template'] = 'views-view--data-use--page';
  $theme_registry['views_view__data_use__page']['path'] = $path . '/theme';
  $theme_registry['views_view__data_use__latest6']['template'] = 'views-view--data-use--latest6';
  $theme_registry['views_view__data_use__latest6']['path'] = $path . '/theme';
  $theme_registry['views_view__data_use__latest3']['template'] = 'views-view--data-use--latest3';
  $theme_registry['views_view__data_use__latest3']['path'] = $path . '/theme';
  $theme_registry['views_view__data_use__latest3_fp']['template'] = 'views-view--data-use--latest3-fp';
  $theme_registry['views_view__data_use__latest3_fp']['path'] = $path . '/theme';
  $theme_registry['views_view_list__data_use__latest6']['template'] = 'views-view-list--data-use--latest6';
  $theme_registry['views_view_list__data_use__latest6']['path'] = $path . '/theme';
}

function gbif_data_use_preprocess_views_view(&$variables) {
  if ($variables['view']->name) {
    switch ($variables['view']->name) {
      case 'data_use':
        // Look up all content nodes that are associated under the same menu parent.
        // Once found, the content node(s) will be rendered and placed on top of the view.
        if ($variables['view']->current_display == 'latest6') {
          $current_display = $variables['view']->current_display;
          $menu_to_look_up = $variables['view']->display[$current_display]->display_options['path'];
          $nodes = node_load_multiple(sk_get_all_menu_node_children_ids($menu_to_look_up));
          $nodes_rendered = array();
          foreach ($nodes as $node) {
            $rendered = '';
            $rendered .= '<h3 class="well-title-top">' . $node->title . '</h3>';
            $view_field = field_view_field('node', $node, 'body', array('label' => 'hidden'));
            $rendered .= render($view_field);
            $nodes_rendered[] = $rendered;
          }
          if (count($nodes_rendered) > 0) $variables['nodes_rendered'] = $nodes_rendered;
        }
        break;
    }
  }
}

function _gbif_data_use_subject_links() {
  $subjects = variable_get('gbif_data_use_subject_definition');
  $links = '';
  $links = '<ul class="filter-list">';
  foreach ($subjects as $term => $subject) {
    $links .= '<li>';
    $url_base = 'newsroom/uses/';
    $links .= l($subject, $url_base . strtolower($subject));
    $links .= '</li>';
  }
  $links .= '</ul>';
  return $links;
}

/**
 * Returns node ids of all the child items, including children of children
 * on all depth levels, of the given node path. Returns an empty array
 * if any error occurs.
 *
 * @param string $node_path
 * @return array
 * @see http://softkube.com/blog/getting-child-menu-items-drupal-menu-tree
 */
function sk_get_all_menu_node_children_ids($node_path) {
  //Stop and return an empty array if node path is empty
  if(empty($node_path)) {
    return array();
  }

  //Init empty array to hold the results
  $nids = array();

  //Init parent keys. Check 'foreach' loop on parent keys for more info.
  $parent_keys = array('plid', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9');

  //Collect menu item corresponding to this path to begin updates.
  //Reference: http://stackoverflow.com/a/11615338/136696
  //Note: we couldn't find a way to get the sub-tree starting from this item
  //only and hence we had to get the whole menu tree built and then loop on
  //the current item part only. Not so bad considering that Drupal will
  //most probably have the whole menu cached anyway.
  $parent_menu_item = menu_link_get_preferred($node_path);

  //Stop and return empty array if a proper current menu item couldn't be found
  if(empty($parent_menu_item['menu_name']) || empty($parent_menu_item['mlid'])) {
    return array();
  }

  //Init parent item mlid for easier usage since now we know it's not empty
  $parent_menu_item_mlid = $parent_menu_item['mlid'];

  //Build whole menu based on the preferred menu_name gotten from this item
  $menu = menu_build_tree($parent_menu_item['menu_name']);

  //Reset menu cache since 'menu_build_tree' will cause trouble later on after
  //you call pathauto to update paths as it can only be called once.
  //Check: https://www.drupal.org/node/1697570
  menu_reset_static_cache();

  //Init processing array. This will hold menu items as we process them.
  $menu_items_to_process = array();

  //First run to fill up the processing array with the top level items
  foreach($menu as $top_level_menu_item) {
    $menu_items_to_process[] = $top_level_menu_item;
  }

  //While the processing array is not empty, keep looping into lower
  //menu items levels until all are processed.
  while(count($menu_items_to_process) > 0) {
    //Pop the top item from the processing array
    $mi = array_pop($menu_items_to_process);

    //Get its node id and add it to $nids if it's a current item child
    //Note that $parent_keys contains all keys that drupal uses to
    //set a menu item inside a tree up to 9 levels.
    foreach($parent_keys as $parent_key) {
      //First, ensure the current parent key is set and also mlid is set
      if(!empty($mi['link']['mlid']) && !empty($mi['link'][$parent_key])) {
        //If the link we're at is the parent one, don't add it to $nids
        //We need this check cause Drupal sets p1 to p9 in a way you
        //can easily use to generate breadcrumbs which means we will
        //also match the current parent, but here we only want children
        if($mi['link']['mlid'] != $parent_menu_item_mlid) {
          //Try to match the link to the parent menu item
          if($mi['link'][$parent_key] == $parent_menu_item_mlid) {
            //It's a child, add it to $nids and stop foreach loop.
            //Link_path has the path to the node. Example: node/63.
            if(!empty($mi['link']['link_path'])) {
              $nids[] = str_replace('node/', '', $mi['link']['link_path']);
              break;
            }
          }
        }
      }
    }

    //Add its child items, if any, to the processing array
    if(!empty($mi['below']) && is_array($mi['below'])) {
      foreach($mi['below'] as $child_menu_item) {
        //Add child item at the beginning of the array so that when
        //we get the list of node ids it's sorted by level with
        //the top level elements first; which is easy to attain
        //and also useful for some applications; why not do it.
        array_unshift($menu_items_to_process, $child_menu_item);
      }
    }
  }

  //Return
  return $nids;
}

/**
 * Define main subjects for filtering.
 */
function gbif_data_use_subject_definition() {
  $subjects = array(
    '968' => t('Invasives'),
    '970' => t('Climate change'),
    '826' => t('Conservation'),
    '891' => t('Agriculture'),
    '878' => t('Human health'),
    '1038' => t('Species distributions'),
  );
  variable_set('gbif_data_use_subject_definition', $subjects);
}
