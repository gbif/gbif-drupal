<?php

/**
 * Implements hook_install().
 */
function gbif_event_install() {
	// Create a directory for storing relevant files for IMS events.
	$uris = array(
		'public://gbif_event/images',
		'public://gbif_event/files'
	);
	foreach ($uris as $uri) {
		$dir_exists = file_prepare_directory($uri);
		if (!$dir_exists) {
			$dir_created = drupal_mkdir($uri, NULL, TRUE);
			if ($dir_created == TRUE) {
				watchdog('gbif_event', '!directory created.', array('!directory' => $uri), WATCHDOG_NOTICE);
			}
			else {
				watchdog('gbif_event', '!directory creation failed.', array('!directory' => $uri), WATCHDOG_ERROR);
			}
		}
		else {
			watchdog('gbif_event', '!directory already exists.', array('!directory' => $uri), WATCHDOG_WARNING);
		}
	}

	// Add redirection to connect to previous event_ims paths.
	gbif_tweaks_redirects_handling('gbif_event', 'create');

}

/**
 * Implements hook_uninstall().
 */
function gbif_event_uninstall() {
	// Delete the directory and generated data from this module
	$uri = 'public://gbif_event';
	$dir_exists = file_prepare_directory($uri);
	if ($dir_exists) {
		$deleted = file_unmanaged_delete_recursive($uri);
		if ($deleted == TRUE) {
			drupal_set_message('Event files are successfully deleted.');
		}
	}
	gbif_tweaks_delete_all(array('event'));
	node_type_delete('event');
	field_purge_batch(500);

	// Remove redirection.
	gbif_tweaks_redirects_handling('gbif_event', 'remove');
}

/**
 * The list of redirects relevant to event handling.
 * @return array
 */
function gbif_event_redirection_list() {
	$redirections = array(
		array(
			'old' => 'newsroom/events',
			'new' => 'newsroom/events/upcoming',
		),
		array(
			'old' => 'newsroom/events/archive',
			'new' => 'newsroom/events/past',
		),
		array(
			'old' => 'newsroom/events/rss',
			'new' => 'newsroom/events/upcoming.xml',
		),
	);
	return $redirections;
}

/**
 * We load default contexts here.
 * The ctools hook doesn't seem to be working which forced us to manually save it
 * here.
 */
function gbif_event_contexts_install() {
	$context = new stdClass();
	$context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
	$context->api_version = 3;
	$context->name = 'event_node_menu';
	$context->description = '';
	$context->tag = 'menu';
	$context->conditions = array(
		'node' => array(
			'values' => array(
				'event' => 'event',
			),
			'options' => array(
				'node_form' => '1',
			),
		),
	);
	$context->reactions = array(
		'menu' => array(
			0 => 'gbif-menu:newsroom/events/upcoming',
		),
	);
	$context->condition_mode = 0;

// Translatables
// Included for use with string extractors like potx.
	t('menu');

	context_save($context);
}

function gbif_event_contexts_uninstall() {
	$context = context_load('event_node_menu');
	context_delete($context);
}