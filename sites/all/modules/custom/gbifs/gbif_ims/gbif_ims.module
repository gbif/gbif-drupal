<?php
/**
 * Created by PhpStorm.
 * User: bko
 * Date: 27/6/14
 * Time: 5:45 PM
 */

module_load_include('inc', 'gbif_ims', 'gbif_ims.filemaker');

function gbif_ims_menu() {
	$items = array();
	$items['admin/config/gbif'] = array(
		'title' => 'GBIF Configuration',
		'description' => t('Configure settings that determine how this Drupal site presents itself as the GBIF Portal.'),
		'position' => 'right',
		'weight' => -10,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);
	$items['admin/config/gbif/ims_settings'] = array(
		'title' => 'IMS configuration',
		'description' => t('Configure GBIF Information Management System.'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('gbif_ims_settings_form'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'gbif_ims.admin.inc',
	);
	return $items;
}

/**
 * Implements hook_entity_info_alter().
 *
 * @todo Remove this when the testbot can properly pick up dependencies
 * for contrib modules.
 */
function gbif_ims_entity_info_alter(&$info) {
	if (isset($info['taxonomy_term'])) {
		$info['taxonomy_term']['token type'] = 'term';
	}
	if (isset($info['taxonomy_vocabulary'])) {
		$info['taxonomy_vocabulary']['token type'] = 'vocabulary';
	}
}

/**
 * Implements hook_theme().
 */
function gbif_ims_theme($existing, $type, $theme, $path) {
	$path = drupal_get_path('module', 'gbif_ims');
	return array(
		'gi_contact_list' => array(
			'template' => 'gi-contact-list',
			'path' => $path . '/theme',
			'variables' => array('results' => NULL, 'group' => NULL),
		),
		'gi_participant_list' => array(
			'template' => 'gi-participant-list',
			'path' => $path . '/theme',
			'variables' => array('results' => NULL, 'group' => NULL),
		),
	);
}

/**
 * Implements hook_token_info().
 */
function gbif_ims_token_info() {
	$types['member'] = array(
		'name' => t('GBIF Members'),
		'description' => t('Tokens for emitting lists from IMS.'),
	);

	$groups = _gi_groups();
	foreach ($groups as $key => $group) {
		$gbif_ims[$key]['name'] = $group;
		$gbif_ims[$key]['description'] = t('List of ') . $group;
	}
	return array(
		'types' => $types,
		'tokens' => array(
			'gbif_ims' => $gbif_ims,
		),
	);
}

/**
 * Implements hook_tokens()
 * @return null|string
 */
function gbif_ims_tokens($type, $tokens, array $data = array(), array $options = array()) {
	$replacements = array();

	if ($type == 'member') {
		foreach ($tokens as $name => $original) {
			switch ($name) {
				case 'bc':
				case 'ec':
				case 'rc':
				case 'sc':
				case 'nc':
				case 'nsg':
					$replacements[$original] = _gi_print_committee_list(_gi_groups($name));
					break;
				case 'gbifs':
					$replacements[$original] = _gi_print_staff_list(_gi_groups($name));
					break;
				case 'vp':
				case 'acp':
				case 'oap':
					$replacements[$original] = _gi_print_participant_list(_gi_groups($name));
					break;
			}
		}
	}

	return $replacements;
}

function _gi_groups($key) {
	$groups = array(
		'bc' => t('Budget Committee'),
		'ec' => t('Executive Committee'),
		'nc' => t('Nodes Committee'),
		'rc' => t('Rules Committee'),
		'sc' => t('Science Committee'),
		'nsg' => t('Nodes Steering Group'),
		'gbifs' => t('GBIF Secretariat'),
		'vp' => t('Voting Participant'),
		'acp' => t('Associate Country Participant'),
		'oap' => t('Other Associate Participant'),
	);
	if (isset($key)) {
		return $groups[$key];
	}
	else {
		return $groups;
	}
}

function gbif_ims_event_update() {
	// Load all event_ims entity.
	$time_start = new DateTime();

	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'event_ims');
		// ->entityCondition('entity_id', 3063); // For debugging a particular record.
	$result = $query->execute();

	if ($result['node']) {
		$nids = array_keys($result['node']);
		foreach ($nids as $nid) {
			$raw_node = node_load($nid);
			$wrapped_node = entity_metadata_wrapper('node', $raw_node);
			$fields = _gbif_ims_event_field_format();
			foreach ($fields as $field => $format) {

				// @todo Fields that have plain_text as their text format break the value->raw() method. To be investigated.
				if ($format == 'full_html') {
					if (!empty($raw_node->$field)) {
						$value = $wrapped_node->$field->value->raw();
					}
					// Clean up the field content if it's empty.
					// Otherwise assign the text format so it'll be rendered correctly.
					if (empty($value)) {
						$wrapped_node->$field = array();
					}
					else {
						$wrapped_node->$field->format = $format;
					}
					unset($value);
					$wrapped_node->save();
				}
			}
		}
	}

	$time_end = new DateTime();
	$time_diff = $time_start->diff($time_end);
	$time_spent = $time_diff->format('%H:%I:%S');
	return t('Events updated. @time elapsed.', array('@time' => $time_spent));
}

/**
 * Temporary helper function to provide the format definition of the fields
 * of event_ims.
 */
function _gbif_ims_event_field_format() {
	$formats = array(
		'body' => 'full_html',
		'field_audience' => 'full_html',
		'field_contact' => 'full_html',
		'field_resources' => 'full_html',
		'field_participants' => 'full_html',
		'field_image_url' => 'plain_text',
		'field_dates' => 'plain_text',
		'field_venuecountry' => 'plain_text',
		'field_status' => 'plain_text',
		'field_language' => 'plain_text',
		'field_venue' => 'full_html',
		'field_city' => 'plain_text',
		'field_country' => 'plain_text',
		'field_type_images' => 'plain_text',
		'field_original_ims_id' => 'plain_text',
	);
	return $formats;
}

/**
 * gbif_ims_sync()
 * Synchronise contact, country, GBIF area, group, group role, node and participant information from the IMS on FileMaker.
 */
function gbif_ims_sync() {
	$start_time = new DateTime();
	$message = _gbif_ims_sync();
	$end_time = new DateTime();
	$time = $end_time->diff($start_time);
	$time_spent = "This task took ";
	if ($time->y > 0) {$time_spent .= $time->y.' years, ';}
	if ($time->m > 0) {$time_spent .= $time->m.' months, ';}
	if ($time->d > 0) {$time_spent .= $time->d.' days, ';}
	if ($time->h > 0) {$time_spent .= $time->h.' hours, ';}
	if ($time->i > 0) {$time_spent .= $time->i.' minutes, ';}
	if ($time->s > 0) {$time_spent .= $time->s.' seconds ';}
	$time_spent .= "to complete.";

	// Should examine the result before informing via the UI
	return $message . ' ' . $time_spent;
}

/**
 * Load FileMaker API if it's not already loaded.
 * @return TRUE if the FileMaker API is loaded, FALSE otherwise.
 */
function filemaker_load_api() {

	if (!class_exists('FileMaker')) {

		// Try to use libraries module.
		if (module_exists('libraries')) {

			$libraries_path = drupal_get_path('module', 'libraries');
			$libraries_include = $libraries_path . '/' . 'libraries.module';

			include_once($libraries_include);

			// Let's see if the FileMaker API is really available from libraries.
			$filemaker_api = './' . libraries_get_path('filemaker') . '/FileMaker.php';
			if (file_exists($filemaker_api)) {
				include_once $filemaker_api;
			}
		}
	}

	if (!class_exists('FileMaker')) {
		drupal_set_message(t('Can not find FileMaker API. Please place the FileMaker API at sites/all/libraries/filemakerapi/FileMaker. See README.txt for details.'), 'error');
	}

	// Tell the caller if the FileMaker class exists.
	return class_exists('FileMaker');
}

/**
 * This function is intended to be called by other modules that need to interact
 * with the FileMaker based GBIF IMS.
 * @return FileMaker
 */
function ims_connection() {
	// Load FileMaker api
	filemaker_load_api();

	// Load credentials
	$IMSCredential = variable_get('ims_connection');

	$IMS = new FileMaker();
	$IMS->setProperty('database', $IMSCredential['database']);
	$IMS->setProperty('hostspec', $IMSCredential['hostname']);
	$IMS->setProperty('username', $IMSCredential['username']);
	$IMS->setProperty('password', $IMSCredential['password']);

	return $IMS;
}