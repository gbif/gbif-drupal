<?php
/**
 * Created by PhpStorm.
 * User: bko
 * Date: 27/6/14
 * Time: 5:45 PM
 */

module_load_include('inc', 'gbif_ims', 'gbif_ims.filemaker');

/**
 * Implements hook_entity_info_alter().
 *
 * @todo Remove this when the testbot can properly pick up dependencies for contrib modules.
 */
function gbif_ims_entity_info_alter(&$info) {
	if (isset($info['taxonomy_term'])) {
		$info['taxonomy_term']['token type'] = 'term';
	}
	if (isset($info['taxonomy_vocabulary'])) {
		$info['taxonomy_vocabulary']['token type'] = 'vocabulary';
	}
}

/**
 * Implements hook_theme().
 */
function gbif_ims_theme($existing, $type, $theme, $path) {
	$path = drupal_get_path('module', 'gbif_ims');
	return array(
		'gi_contact_list' => array(
			'template' => 'gi-contact-list',
			'path' => $path . '/theme',
			'variables' => array('results' => NULL, 'group' => NULL),
		),
		'gi_participant_list' => array(
			'template' => 'gi-participant-list',
			'path' => $path . '/theme',
			'variables' => array('results' => NULL, 'group' => NULL),
		),
		'ims_queue_items' => array(
			'variables' => array('items' => NULL),
		),
	);
}

/**
 * Implements hook_token_info().
 */
function gbif_ims_token_info() {
	$types['member'] = array(
		'name' => t('GBIF Members'),
		'description' => t('Tokens for emitting lists from IMS.'),
	);

	$groups = _gi_groups(NULL);
	foreach ($groups as $key => $group) {
		$gbif_ims[$key]['name'] = $group;
		$gbif_ims[$key]['description'] = t('List of ') . $group;
	}
	return array(
		'types' => $types,
		'tokens' => array(
			'member' => $gbif_ims,
		),
	);
}

/**
 * Implements hook_tokens()
 * @return null|string
 */
function gbif_ims_tokens($type, $tokens, array $data = array(), array $options = array()) {
	$replacements = array();

	if ($type == 'member') {
		foreach ($tokens as $name => $original) {
			switch ($name) {
				case 'bc':
				case 'ec':
				case 'rc':
				case 'sc':
				case 'nc':
				case 'nsg':
        case 'tg_adbd':
        case 'tg_dfua':
        case 'tg_dfudm':
					$replacements[$original] = _gi_print_committee_list(_gi_groups($name));
					break;
				case 'gbifs':
					$replacements[$original] = _gi_print_staff_list(_gi_groups($name));
					break;
				case 'vp':
				case 'acp':
				case 'oap':
					$replacements[$original] = _gi_print_participant_list(_gi_groups($name));
					break;
      }
		}
	}

	return $replacements;
}

/**
 * Helper function to prevent empty text value from saving into node field.
 * @param $value
 * @param $format
 * @return array|string|null
 */
function gbif_ims_format_value($value, $format = NULL) {
	if (isset($format)) {
		if (!empty($value)) {
			$result = array(
				'value' => htmlspecialchars_decode($value),
				'format' => $format,
			);
			return $result;
		}
		elseif ((trim(strtolower($value))) == 'n/a') {
			return NULL;
		}
		else {
			return NULL;
		}
	}
	else {
		$result = (!empty($value) || (trim(strtolower($value))) == 'n/a') ? htmlspecialchars_decode($value) : NULL;
		return $result;
	}
}

/**
 * Load FileMaker API if it's not already loaded.
 * @return TRUE if the FileMaker API is loaded, FALSE otherwise.
 */
function filemaker_load_api() {

	if (!class_exists('FileMaker')) {

		// Try to use libraries module.
		if (module_exists('libraries')) {

			$libraries_path = drupal_get_path('module', 'libraries');
			$libraries_include = $libraries_path . '/' . 'libraries.module';

			include_once($libraries_include);

			// Let's see if the FileMaker API is really available from libraries.
			$filemaker_api = './' . libraries_get_path('filemaker') . '/FileMaker.php';
			if (file_exists($filemaker_api)) {
				include_once $filemaker_api;
			}
		}
	}

	if (!class_exists('FileMaker')) {
		drupal_set_message(t('Can not find FileMaker API. Please place the FileMaker API at sites/all/libraries/filemakerapi/FileMaker. See README.txt for details.'), 'error');
	}

	// Tell the caller if the FileMaker class exists.
	return class_exists('FileMaker');
}

/**
 * Helper function that provides the definition of contact groups.
 * @param $key
 * @return array
 */
function _gi_groups($key) {
	$groups = array(
		'bc' => t('Budget Committee'),
		'ec' => t('Executive Committee'),
		'nc' => t('Nodes Committee'),
		'rc' => t('Rules Committee'),
		'sc' => t('Science Committee'),
		'nsg' => t('Nodes Steering Group'),
		'gbifs' => t('GBIF Secretariat'),
		'vp' => t('Voting Participant'),
		'acp' => t('Associate Country Participant'),
		'oap' => t('Other Associate Participant'),
    'tg_adbd' => t('Accelerating the Discovery of Bio-collections Data Task Force'),
    'tg_dfua' => t('DFFU-A - Task Group on Fitness for Use in Agrobiodiversity'),
    'tg_dfudm' => t('DFFU-DM - Task Group on Data Fitness for Use in Distribution Modelling'),
	);
	if (!empty($key)) {
		return $groups[$key];
	}
	else {
		return $groups;
	}
}