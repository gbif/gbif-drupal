<?php
/**
 * @file
 * This module retrieves relevant literature entries about a node from Mendeley API.
 * @see http://unitstep.net/blog/2009/05/05/using-curl-in-php-to-access-https-ssltls-protected-sites/
 */

include_once('HttpPost.php');
include_once(drupal_get_path('module', 'gbif_mendeley') . '/includes/curl_multi.inc');
include_once(drupal_get_path('module', 'gbif_mendeley') . '/gbif_mendeley.theme_definition.inc');

define('MENDELEY_GBIF_PORTAL_CLIENT_ID', variable_get('mendeley_app_id'));
define('MENDELEY_GBIF_PORTAL_CLIENT_SECRET', variable_get('mendeley_app_secret'));
define('MENDELEY_GBIF_PUBLIC_GROUP_ID', 'dcb8ff61-dbc0-3519-af76-2072f22bc22f');
define('MENDELEY_GBIF_STAFF_GROUP_ID', 'e5fcecec-e1e4-32cd-bde1-987edb6583f4');
define('MENDELEY_API', 'https://api.mendeley.com');
define('MENDELEY_AUTHORIZATION_ENDPOINT', MENDELEY_API . '/oauth/authorize');
define('MENDELEY_OAUTH_TOKEN_EXCHANGE_ENDPOINT', MENDELEY_API . '/oauth/token');
define('MENDELEY_REDIRECT_URI', $GLOBALS['base_url'] . '/mendeley/oauth2_callback');
define('GBIF_ENUMERATION_COUNTRY', 'http://api.gbif.org/v1/enumeration/country');

/**
 * Implements hook_menu().
 * @todo Access point for JSON call
 */
function gbif_mendeley_menu() {
  $items = array();
  $items['admin/config/gbif/mendeley'] = array(
    'title' => 'GBIF on Mendeley',
    'description' => t('Settings for accessing GBIF public library on Mendeley and updating statistics.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gbif_mendeley_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gbif_mendeley.admin.inc',
  );

  // Menu link for full list browsing.
  $items['mendeley'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'GBIF Use Cases',
    'page callback' => 'gbif_mendeley_page_router',
    'access callback' => TRUE,
    'weight' => 30,
  );

	$items['mendeley/oauth2_callback'] = array(
		'page callback' => '_gbif_mendeley_oauth2_callback',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Implements hook_page_build().
 */
function gbif_mendeley_page_build(&$page) {
  // determine title and slogan in banner
  $current_path = current_path();
  if (drupal_match_path($current_path, 'mendeley*') !== FALSE) {
    $page['highlighted_title'] = array(
      'name' => t('Peer-reviewed publications'),
      'description' => t('(via <a href="@url">Mendeley</a>)', array('@url' => 'http://www.mendeley.com/groups/1068301/gbif-public-library/')),
    );
  }

}

/**
 * Implements hook_preprocess_page().
 * @param $variables
 */
function gbif_mendeley_preprocess_page(&$variables) {
  $path_to_highlight = 'mendeley';
  // Detect the URLs that needs "Mendeley" highlighted.
  if (isset($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs'])) {
    if (drupal_match_path(current_path(), 'mendeley/*')) {
      // find the registered menu item and add the "active" CSS class to the attributes
      foreach ($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'] as $k => $tab) {
        if (gettype($k) == 'integer') {
          if ($tab['#href'] == $path_to_highlight) {
            // make it active
            array_push($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'][$k]['#attributes']['class'], 'active');
            watchdog('mendeley', 'Active menu item set for data use node.', NULL, WATCHDOG_DEBUG);
          }
        }
      }
    }
  }
}

/**
 * This is the start of the document retrieval from Mendeley. It first check
 * whether there is a valid token by implementing the Authorization code flow
 * provided by Mendeley API.
 *
 * Whatever the result is, this function should return a message string to
 * inform the user end.
 *
 * @see http://dev.mendeley.com/reference/topics/authorization_auth_code.html
 * @todo To refactor several utility functions that validate token or redirecting to user authentication.
 */
function gbif_mendeley_retrieve_by_oauth2() {

  $mendeley_access_token = variable_get('mendeley_access_token');

  // Check if the token is valid. If not, then set it as null.
  if (!isset($mendeley_access_token->expires_in) || !isset($mendeley_access_token->refresh_token)) {
    $mendeley_access_token = NULL;
  }

	// If there is no token stored, or the token doesn't have authorization code,
	// then we need to direct user to authentication.
	if ($mendeley_access_token == NULL || !isset($mendeley_access_token->code) || $mendeley_access_token->message == 'No service found for your request') {
		$state = drupal_hash_base64(variable_get('mendeley_state', drupal_random_bytes(128)));
    $params = array(
      'client_id' => MENDELEY_GBIF_PORTAL_CLIENT_ID,
      'redirect_uri' => MENDELEY_REDIRECT_URI,
      'response_type' => 'code',
      'scope' => 'all',
      'state' => $state,
    );
		$auth_ui_url = url(MENDELEY_AUTHORIZATION_ENDPOINT, array(
      'query' => $params
    ));

		try {
			drupal_goto($auth_ui_url);
		}
		catch (Exception $e) {
			drupal_set_message($e->getMessage(), 'error');
		}
	}
	// If there is a token, determine the workflow by checking whether the token
	// is expired or not.
	else {
		$token_expired = (time() - $mendeley_access_token->timestamp >= $mendeley_access_token->expires_in) ? TRUE : FALSE;
		if ($token_expired == TRUE) {
			// Refresh the token.
			$message = _gbif_mendeley_oauth2_callback($mendeley_access_token);
			drupal_set_message($message, 'status');
		}
		elseif ($token_expired == FALSE) {
			// Keep using the existing token and proceed to document retrieval.
			$message = gbif_mendeley_retrieve($mendeley_access_token);
			drupal_set_message($message, 'status');
		}
	}
}

/**
 * When this function gets called, it means the user info is successfully
 * authenticated, despite errors in scope and response_type are still passed to
 * this function.
 *
 * @todo error handling for scope and response_type.
 * @todo add 'state' checking to prevent CSRF attack.
 */
function _gbif_mendeley_oauth2_callback($token_json = NULL) {

	// If $token_json is set, then this should be a call to refresh token.
	if (isset($token_json->refresh_token)) {
		$params = array(
			'grant_type' => 'refresh_token',
			'refresh_token' => $token_json->refresh_token,
			'redirect_uri' => MENDELEY_REDIRECT_URI,
		);
	}
	// If not, then it's the first time to request an OAuth access token.
	// In this case 'code' and 'state' should exist.
	elseif ($_GET['code'] && $_GET['state']) {
		$params = array(
			'grant_type' => 'authorization_code',
			'code' => $_GET['code'],
			'redirect_uri' => MENDELEY_REDIRECT_URI,
		);
	}

	// Actual call to get new or refreshed token.
	$url = MENDELEY_OAUTH_TOKEN_EXCHANGE_ENDPOINT;
	$query = http_build_query($params);

	$ch = curl_init($url);
	curl_setopt($ch, CURLOPT_HTTPHEADER, array("Authorization: Basic " . base64_encode(MENDELEY_GBIF_PORTAL_CLIENT_ID . ':' . MENDELEY_GBIF_PORTAL_CLIENT_SECRET)));
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $query);
  curl_setopt($ch, CURLOPT_HEADER, 'Content-Type: application/x-www-form-urlencoded');
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $result = curl_exec($ch);
	$json = json_decode(end(explode("\r\n", $result)));

	if (isset($json->error)) {
		return 'Error: ' . $json->error . '. ' . $json->error_description;
	}
	else {
		$json->timestamp = time();
		$json->code = (isset($token_json->code)) ? $token_json->code : $_GET['code'];
		$json->state = (isset($token_json->state)) ? $token_json->state : $_GET['state'];
		variable_set('mendeley_access_token', $json);

		// Once the token is renewed, proceed to document retrieval.
		// If this is a call redirected from Mendeley, then we message via drupal_set_message().
		if (!isset($token_json)) {
			$message = t('Please press "Update now" again to continue document retrieval.');
			drupal_set_message($message, 'status');
			drupal_goto('admin/config/gbif/mendeley');
		}
		else {
			return gbif_mendeley_retrieve($json);
		}
	}
}

/**
 * Beginning the document retrieval from Mendeley. This function checks whether
 * The local copy is expired.
 */
function gbif_mendeley_retrieve($token_json) {
	// Prepare the uri for storing retrieved documents
	$documents_file_loc = file_build_uri('gbif_mendeley/documents.json');
	$documents_file_path = drupal_realpath($documents_file_loc);
	$documents_exist = file_exists($documents_file_loc);

	$interval = variable_get('gbif_mendeley_update_interval', 86400);
	// If documents are already retrieved and it's younger than defined in
	// gbif_mendeley_update_interval, then use the local copy.
	// Otherwise retrieve and update again.
	if ($documents_exist == TRUE) {
		$documents_time = filemtime($documents_file_path) ? filemtime($documents_file_path) : 0;
		$documents_age = time() - $documents_time;

		if ($documents_age < $interval) {
			return t('The local copy is still fresh according to the setting of update interval.');
		}
		else {
			// Refresh documents from Mendeley API.
			return _gbif_mendeley_get_group_documents($token_json, $documents_file_loc);
		}
	}
	// If there is no document retrieved, then retrieve from Mendeley API.
	else {
		return _gbif_mendeley_get_group_documents($token_json, $documents_file_loc);
	}
}

/**
 * The actual call to get documents from Mendeley group.
 * @param $token_json
 * @return null|string
 */
function _gbif_mendeley_get_group_documents($token_json, $documents_file_loc) {

	// A container variable for retrieved documents.
	$documents_json = array();

	// Get GBIF group documents.
	// https://api.mendeley.com:443/documents?group_id=dcb8ff61-dbc0-3519-af76-2072f22bc22f&view=tags&limit=500
	$limit = 500;
	$group_docs_url = url(MENDELEY_API . '/documents', array(
		'query' => array(
			'group_id' => MENDELEY_GBIF_PUBLIC_GROUP_ID,
			'view' => 'tags',
			'limit' => $limit,
			'access_token' => $token_json->access_token,
		)
	));
	$result = _gbif_mendeley_curl($group_docs_url);

	// Check http code and it's indeed returned with documents.
	if ($result['api_status']['http_code'] == 200 && count($result['headers']['json']) == 500) {

		// Store the documents in the temp container variable.
		$documents_json = array_merge($documents_json, array_values($result['headers']['json']));

		// Iterate through the remaining calls to get all documents. Remember we've stored the first batch.
		$remaining = array();
		$iterations = ceil(intval($result['headers']['Mendeley-Count']) / $limit) - 1;
		for ($i = 1; $i <= $iterations; $i++) {
			if ($i == 1) {
				preg_match('~<(.*?)>~', $result['headers']['Link'][0], $next_url);
			}
			else {
				preg_match('~<(.*?)>~', $remaining[$i - 1]['headers']['Link'][0], $next_url);
			}
			$remaining[$i] = _gbif_mendeley_curl($next_url[1]);
			$documents_json = array_merge($documents_json, array_values($remaining[$i]['headers']['json']));
		}
	}

	$all_retrieved = (isset($result['headers']['Mendeley-Count']) && count($documents_json) == $result['headers']['Mendeley-Count']) ? TRUE : FALSE;

	// @todo Sanity check for necessary attributes: id (UUID), source, identifiers and tags.

	// Save documents if all are retrieved.
	if ($all_retrieved == TRUE) {

		// Fill document detail.
		$documents_json = _gbif_mendeley_get_group_documents_detail($token_json, $documents_json);

		$file_save_success = file_save_data(json_encode($documents_json), $documents_file_loc, FILE_EXISTS_REPLACE);
		if (is_object($file_save_success)) {
			$message = t('The downloaded document is updated.');
			drupal_set_message($message, 'status');
			return $message;
		}
		else {
			$message = t('The downloaded document is not updated. Investigation needed.');
			drupal_set_message($message, 'warning');
			return $message;
		}
	}
	else {
		$message = t('Not all documents have been retrieved. Investigation needed.');
		drupal_set_message($message, 'warning');
		return $message;
	}
}

/**
 */
function _gbif_mendeley_get_group_documents_detail($token_json, $documents_json) {

	variable_set('gbif_mendeley_detail_updated', FALSE);
	$documents_json_detailed = $documents_json;
	$url_to_retrieve = array();

	// @see http://dev.mendeley.com/methods/#additional-document-attributes
	$attributes_to_add = array(
		'profile_id',
		'group_id',
		'last_modified',
		'accessed',
		'tags',
		'read',
		'starred',
		'authored',
		'confirmed',
		'hidden',
		'citation_key',
		'source_type',
		'language',
		'short_title',
		'reprint_edition',
		'genre',
		'country',
		'translators',
		'series_editor',
		'code',
		'medium',
		'user_context',
		'department',
		'patent_owner',
		'patent_application_number',
		'patent_legal_status',
		'id',
		'type',
		'abstract',
		'identifiers',
		'month',
		'year',
		'source',
		'day',
		'title',
		'revision',
		'created',
		'authors',
		'keywords',
		'pages',
		'volume',
		'issue',
		'websites',
		'publisher',
		'city',
		'edition',
		'institution',
		'series',
		'chapter',
		'editors',
		'file_attached'
	);

	// Queue up URLs.
	foreach ($documents_json_detailed as $k => $doc) {
		// Example: https://api.mendeley.com:443/documents/321a5953-afd8-35d6-a070-b1cd829fec23?view=all
		$url_to_retrieve[$k] = url(MENDELEY_API . '/documents/' . $doc->id, array(
			'query' => array(
				'view' => 'all',
				'access_token' => $token_json->access_token,
			)
		));
	}

	// Container for resources to be processed.
	$resources = array();
	// We'll only process 200 concurrent URL requests every 10 seconds.
	$time_start = microtime(true);
	$batches = array_chunk($url_to_retrieve, 200, TRUE);
	foreach ($batches as $batch) {
		$pg = new ParallelGet($batch);
		$resources = array_merge($resources, $pg->response);
		sleep(10);
	}
	$total_time_string = t('Total time for group document retrieval: !seconds seconds', array('!seconds' => round(microtime(true) - $time_start, 4)));
	watchdog('mendeley', $total_time_string, WATCHDOG_INFO);

	// Check if there is any unsuccessful response as "error".
	// And if there is any, one should check Drupal watchdog to find out.
	$failed_curl_resource = array();
	foreach ($resources as $i => $resource) {
		if ($resource == 'error') $failed_curl_resource[$i] = 'error';
	}

	// Process retrieved document details only if there is no error.
	if (count($failed_curl_resource) == 0) {
		foreach ($url_to_retrieve as $k => $url) {
			$headers = _gbif_mendeley_get_headers($resources[$k]);
			if (isset($headers['json']->error) || $headers['json'] == NULL) {
				$failed_curl_resource[$k] = $resources[$k];
			}
			else {
				// Simple check to make sure the result is of the same document.
				$matched = (strpos($url, $headers['json']->id) == FALSE) ? FALSE : TRUE;
				if ($matched) {
					foreach ($attributes_to_add as $attr) {
						if (isset($headers['json']->$attr)) $documents_json_detailed[$k]->$attr = $headers['json']->$attr;
					}
				}
				else {
					$message = t("Document !id doesn't match the !url of handle !k", array('!id' => $headers['json']->id, '!url' => $url, '!k' => $k));
					watchdog('mendeley', $message, NULL, WATCHDOG_ERROR);
				}
			}
		}
		if (count($failed_curl_resource) == 0) {
			variable_set('gbif_mendeley_detail_updated', TRUE);
			return $documents_json_detailed;
		}
		else {
			$message = t('There are !number errors when analysing headers.', array('!number' => count($failed_curl_resource)));
			watchdog('mendeley', $message, NULL, WATCHDOG_ERROR);
			return $documents_json;
		}
	}
	else {
		$message = t('There are !number failed resources.', array('!number' => count($failed_curl_resource)));
		watchdog('mendeley', $message, NULL, WATCHDOG_ERROR);
		return $documents_json;
	}
}

/**
 * Implementation of hook_cron().
 */
function gbif_mendeley_cron() {
  $sync_status = variable_get('gbif_tweaks_sync_status');
  if ($sync_status == 'halted') {
    // do nothing
  }
  else {
    // sync according to interval setting
    $interval = variable_get('gbif_mendeley_update_interval');
    if ($interval == 0) {
      watchdog('mendeley', 'Mendeley synchronisation has been suspended', NULL, WATCHDOG_INFO);
    }
    else {
      $documents_file_loc = file_build_uri('gbif_mendeley/documents.json');
      $file_exists = file_exists(drupal_realpath($documents_file_loc));

      if ($file_exists == TRUE) {
        $documents = json_decode(file_get_contents(file_create_url($documents_file_loc)));
        if (count($documents) > 0) {
          $cron_result = gbif_mendeley_retrieve_by_oauth2();
          watchdog('mendeley', t('Cron attempted: ') . $cron_result, WATCHDOG_INFO);
          $analyse_result = gbif_mendeley_analyse();
          watchdog('mendeley', t('Publication analysis attempted: ') . $analyse_result, WATCHDOG_INFO);
        }
      }
      else {
        $message = t('Please manually trigger the first synchronisation for the cron job to run automatically.', array());
        watchdog('mendeley', $message, array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * @return string: Either HTML or JSON.
 */
function gbif_mendeley_page_router() {

	$args = arg();
	$tag_sets = gbif_mendeley_default_tag_sets();
  $json_export = FALSE;

	// $args[0] is "mendeley" so we determine the list from $args[1].
	// The landing page.
	if (count($args) == 1 && !isset($args[1])) {
		$machine_name = 'use_cases';
		$documents_to_export = json_decode(file_get_contents(file_build_uri('gbif_mendeley/' . $machine_name . '.json')), TRUE);
		$html = _mendeley_print_publications($documents_to_export, $machine_name);
		return theme('mendeley_publications', array('html' => $html));
	}
	// When $args[1] is defined.
	elseif (count($args) == 2 && gbif_mendeley_defined_url($args[1])) {
		foreach ($tag_sets as $tag_set) {
			if (isset($tag_set['url']) && $tag_set['url'] == $args[1]) $machine_name = $tag_set['machine_name'];
		}
		$documents_to_export = json_decode(file_get_contents(file_build_uri('gbif_mendeley/' . $machine_name . '.json')), TRUE);
		$html = _mendeley_print_publications($documents_to_export, $machine_name);
		return theme('mendeley_publications', array('html' => $html));
	}
  // Documents by year, prepared for output.
  elseif ((count($args) == 4 || count($args) == 3) && $args[1] == 'year') {
    $documents = json_decode(file_get_contents(file_build_uri('gbif_mendeley/documents.json')), TRUE);
    $documents_by_year = gbif_mendeley_group_docs_by_year($documents);
    $documents = $documents_by_year[$args[2]];
    $count = count($documents);

    if (isset($args[3]) && $args[3] == 'count') {
      $result = $count;
    }
    else {
      if ($count == 0) {
        $message_json = 'No document has been curated for ' . $args[2] . '.';
        $result = array('Message' => $message_json);
      }
      else {
        $result = $documents;
      }
    }
    $json_export = TRUE;

  }
	// When it's a request to call country list in JSON, prepare data for output.
	elseif ((count($args) == 4 || count($args) == 5 || count($args) == 7) && $args[1] == 'country' && $args[3] == 'json') {

		// Find the country documents.
		$documents = json_decode(file_get_contents(file_build_uri('gbif_mendeley/countries/' . $args[2] . '.json')), TRUE);
		$count = count($documents);

		if ($count == 0) {
			$message_json = 'No document is tagged with ' . $args[2] . '.';
			$result = ($args[4] == 'count') ? $count : array('Message' => $message_json);
		}
		else {

      switch ($args[4]) {
        case 'count':
          $documents = $count;
          break;
        case 'recent5':
          $documents = array_slice($documents, 0, 5);
          break;
        case 'range':
          $year_start = $args[5];
          $year_end = $args[6];
          $documents_by_year = gbif_mendeley_group_docs_by_year($documents);
          $documents_total = array();
          for ($i = $year_start; $i <= $year_end; $i++) {
            $documents_total = array_merge($documents_total, $documents_by_year[$i]);
          }
          $documents = count($documents_total);
          break;
      }
      $result = $documents;
		}
    $json_export = TRUE;
	}
	else {
		return MENU_NOT_FOUND;
	}

  // JSON or JSONP export
  if ($json_export == TRUE && isset($result)) {
    // If this is a JSONP request.
    if (isset($_GET['callback'])) {
      header('Content-Type: text/javascript; charset=utf8');
      header('Access-Control-Max-Age: 3628800');
      header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE');
      echo $_GET['callback'] . '(' . json_encode($result) . ')';
    }
    else {
      drupal_json_output($result);
    }
  }
}

/**
 * Group Mendeley documents by year
 */
function gbif_mendeley_group_docs_by_year($documents) {
  $documents_by_year = array();
  foreach ($documents as $key => $item) {
    $documents_by_year[$item['year']][$key] = $item;
  }
  ksort($documents_by_year, SORT_NUMERIC);
  return $documents_by_year;
}

/**
 * Safeguarding page routing from mis-spelled URLs.
 * @param $arg
 * @return bool
 */
function gbif_mendeley_defined_url($arg) {
	$tag_sets = gbif_mendeley_default_tag_sets();

	$defined = FALSE;
	if (isset($arg)) {
		foreach ($tag_sets as $tag_set) {
			if (isset($tag_set['url']) && $tag_set['url'] == $arg) $defined = TRUE;
		}
	}
	return $defined;
}

function _mendeley_print_publications($documents, $machine_name) {
	$output = array();

	$count = count($documents);
	$tag_sets = gbif_mendeley_default_tag_sets();
	// Find the title and description for used in the page.
	foreach ($tag_sets as $tag_set) {
		if ($tag_set['machine_name'] == $machine_name) {
			$output['title'] = $tag_set['tab_name'];
			$output['desc'] = $tag_set['desc'] . '.';
			$output['count_header'] = format_plural($count,
				'1 publication for @theme',
				'!count publications for @theme',
				array('!count' => number_format($count), '@theme' => $tag_set['tab_name'])
			);
		}
	}

	if ($count > 0) {
		$per_page = 10;
		$current_page = pager_default_initialize($count, $per_page);
		$chunks = array_chunk($documents, $per_page, TRUE);
		$html = theme('mendeley_publications_list_item', array('publications' => $chunks[$current_page], 'per_page' => $per_page));
		$html .= '<hr>';
		$html .= theme('pager', array('page', $count));
		$output['list_publications'] = $html;
	}
	else {
		$output['list_publications'] = t('Publications in this category are temporarily unavailable. Please come back a few minutes later.', array());
	}

	return $output;
}


function _gbif_mendeley_curl($url) {
	$output = array();
	$ch = curl_init(); // Create a cURL resource
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_HEADER, true);
	$time_start = microtime(TRUE);
	$ch_result = curl_exec($ch);
	$api_status = curl_getinfo($ch);
	curl_close($ch);
	unset($ch);

	$output['api_status'] = $api_status;
	$output['ch_result'] = $ch_result;
	$output['headers'] = _gbif_mendeley_get_headers($ch_result);
	$output['time'] = microtime(TRUE) - $time_start;

	return $output;
}

/**
 * Group retrieved documents according to defined categories.
 */
function gbif_mendeley_analyse() {

  $tag_sets = gbif_mendeley_default_tag_sets();
   
  // Check if there is a local copy of Mendeley documents.
  $documents_file_loc = file_build_uri('gbif_mendeley/documents.json');
  $file_exists = file_exists(drupal_realpath($documents_file_loc));
  
  $updated = variable_get('gbif_mendeley_detail_updated');

	if ($file_exists == TRUE && $updated == TRUE) {
		$documents = json_decode(file_get_contents(drupal_realpath($documents_file_loc)));
		$file_save_error = FALSE;

		foreach ($tag_sets as $tag_set) {
			$machine_name = $tag_set['machine_name'];
			$$machine_name = array();
			if ($tag_set['type'] == 'gbif_used') {
				$file_loc = file_build_uri('gbif_mendeley/' . $machine_name . '.json');
			}
			elseif ($tag_set['type'] == 'country') {
				$file_loc = file_build_uri('gbif_mendeley/countries/' . $machine_name . '.json');
			}

			foreach ($documents as $k => $doc) {
				$tag_count = count($tag_set['tags']);

				if (count(array_intersect($tag_set['tags'], $doc->tags)) == $tag_count) {
					array_push($$machine_name, $doc);
				}
			}

			// Some categories have a sub-category that includes documents in the same list.
			if (isset($tag_set['tags_alt'])) {
				foreach ($documents as $k => $doc) {
					foreach ($tag_set['tags_alt'] as $tag_alt) {
						$tag_count = count($tag_alt);

						if (count(array_intersect($tag_set['tags_alt'], $doc->tags)) == $tag_count) {
							array_push($$machine_name, $doc);
						}
					}
				}
			}

			// Sort according to year and the first author
			foreach ($$machine_name as $doc) {
				// We create a new attribute here for sorting.
				$doc->firstAuthor = $doc->authors[0]->last_name;
			}
			usort($$machine_name, gbif_mendeley_make_comparer('year', 'firstAuthor'));
			$file_save_success = file_save_data(json_encode($$machine_name), $file_loc, FILE_EXISTS_REPLACE);
			if ($file_save_success == FALSE) $file_save_error = TRUE;
		}

		if ($file_save_error == TRUE) {
			return t('Error while saving files.');
		}
		else {
			return t('All files are successfully analysed and saved.');
		}
  }
	else {
		return t("Either the document file doesn't exist or document details are not updated. Investigation of the retrieval required.");
	}
}

/**
 * Helper function for sorting articles
 * http://goo.gl/PjtC0B
 */
function gbif_mendeley_make_comparer() {
  $criteria_names = func_get_args();
  $comparer = function($first, $second) use ($criteria_names) {
    // Do we have anything to compare?
    while(!empty($criteria_names)) {
      // What will we compare now?
      $criterion = array_shift($criteria_names);

      // Do the actual comparison
      // If it's year, then sort descending
      if ($criterion == 'year') {
        if ($first->$criterion < $second->$criterion) {
          return 1;
        }
        elseif ($first->$criterion > $second->$criterion) {
          return -1;
        }
      }
      else {
        if ($first->$criterion < $second->$criterion) {
          return -1;
        }
        elseif ($first->$criterion > $second->$criterion) {
          return 1;
        }
      }
    }

    // Nothing more to compare with, so $first == $second
    return 0;                               
  };
  return $comparer;    
}

/**
 * Helper function to get headers variables in a mendeley call
 * from http headers and the top level of JSON output.
 */
function _gbif_mendeley_get_headers($curl_result) {
  $headers = array();
  $result_by_line = explode("\r\n", $curl_result);

	// Get the documents in json format, convert it to array
	$json_result = json_decode(end($result_by_line));

	// Pop off the last two elements.
	array_splice($result_by_line, -2);

	// Parse each line.
  foreach ($result_by_line as $line) {
    $header = explode(": ", $line);
		if ($header[0] == 'Link') {
			$headers['Link'][] = $header[1];
		}
		elseif (count($header) == 1 && strpos($header[0], 'HTTP') == 0) {
			$http = explode(' ', $header[0]);
			$headers['http_code'] = $http[1];
		}
		else {
			$headers[$header[0]] = $header[1];
		}
  }

	$headers['json'] = $json_result;

  return $headers;
}

/**
 * Helper function to resolve duplicated documents
 */
function _gbif_mendeley_deduplicate(&$docs) {
  $unique_docs = array();
  foreach ($docs as $doc) {
    $unique_docs[$doc->id] = $doc;
  }
  $docs = array_values($unique_docs);
  return $docs;
}

/**
 * Implementation of hook_token_info().
 * Declare the type of tokens we support
 *
 */
function gbif_mendeley_token_info() {
  $types['mendeley'] = array(
    'name' => t("Mendeley"),
    'description' => t("Tokens for various mendeley listings"),
  );

  $tag_sets = gbif_mendeley_default_tag_sets();

  foreach ($tag_sets as $tag_set) {
    if ($tag_set['type'] == 'gbif_used') {
      $type = $tag_set['machine_name'];
      $gbif_mendeley[$type] = array(
        'name' => $tag_set['name'],
        'description' => $tag_set['desc'],
      );
    }
  }

  return array(
    'types' => $types,
    'tokens' => array(
      'mendeley' => $gbif_mendeley,
    ),
  );
}

/**
 * Implementation of hook_tokens().
 * Run the actual tokens replacement;
 */
function gbif_mendeley_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();
  
  if ($type == 'mendeley') {
    foreach ($tokens as $machine_name => $original) {
      $replacements[$original] = _mendeley_print_recent_publications($machine_name, 3);
    }
  }

  return $replacements;
}

/**
 * Print most recent documents.
 * @param $machine_name
 * @param $number number of documents to show.
 */
function _mendeley_print_recent_publications($machine_name, $number) {
	$tag_sets = gbif_mendeley_default_tag_sets();

	$html = NULL;
	foreach ($tag_sets as $tag_set) {
		if ($tag_set['machine_name'] == $machine_name) {
			$documents = json_decode(file_get_contents(file_build_uri('gbif_mendeley/' . $machine_name . '.json')), TRUE);
			$documents = array_slice($documents, 0, $number);
			$html = '<p>' . t('Most recent !count publications in this category:', array('!count' => $number)) . '</p>';
			$html .= theme('mendeley_publications_digest_list_item', array('publications' => $documents));
			$html .= l('see more...', 'mendeley/' . $machine_name);
			return $html;
		}
	}
}

function gbif_mendeley_theme($existing, $type, $theme, $path) {
	$path = drupal_get_path('module', 'gbif_mendeley');
	return array(
		'mendeley_publications' => array(
			'template' => 'publications',
			'path' => $path . '/theme',
			'variables' => array('html' => NULL),
		),
		'mendeley_publications_list_item' => array(
			'template' => 'publications-list-item',
			'path' => $path . '/theme',
			'variables' => array('publications' => NULL, 'per_page' => NULL),
		),
		'mendeley_publications_digest_list_item' => array(
			'template' => 'publications-digest-list-item',
			'path' => $path . '/theme',
			'variables' => array('publications' => NULL),
		),
	);
}

function _gbif_mendeley_get_more_use_cases() {
	$tags = gbif_mendeley_default_tag_sets();
	$links = '';
	$links .= '<ul class="filter-list">';
	foreach ($tags as $tag) {
		if ($tag['type'] == 'gbif_used') {
			$links .= '<li>'. l($tag['tab_name'], 'mendeley/' . $tag['url']) . '</li>';
		}
	}
	$links .= '</ul>';
	return $links;
}