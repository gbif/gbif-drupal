<?php

/**
 * @file
 * gbif_pages.module
 *
 * An important reference post:
 * @see http://chacadwa.com/blog/2012/12/08/override-drupal-7-taxonomy-display-vocabulary
 * @see https://api.drupal.org/api/views/views.module/function/views_embed_view/7
 */

include_once 'gbif_pages.features.inc';

/**
 * Implements hook_menu_alter().
 */
function gbif_pages_menu_alter(&$items) {
  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'gbif_pages_taxonomy_term_page';
	$items['search/node/%menu_tail']['page callback'] = 'gbif_pages_search_view';
}

/**
 * Implements hook_block_info_alter().
 */
function gbif_pages_block_info_alter(&$blocks, $theme, $code_blocks) {
  switch ($theme) {
    case 'bvng':
      break;
  }
}

/**
 * Implements hook_library().
 */
function gbif_pages_library() {
	$env = variable_get('environment_settings');
  $libraries['gbif_page_widgets'] = array(
    'title' => 'GBIF Widgets',
    'js' => array(
			$env['data_portal_base_url'] . '/js/widgets.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 20,
      ),
    ),
  );
  return $libraries;
}

/**
 * Implementation of hook_views_api().
 */
function gbif_pages_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'gbif_pages') . '/views'
  );
}

function gbif_pages_views_register() {
	$views = array(
		'taxonomy_term_json',
	);
	return $views;
}

/**
 * Build custom term pages with associated views.
 *
 * The logic assumes one view per term page. In case we need to
 * associate more than one view, we then add a condition and write
 * another custom function which should return $build.
 */
function gbif_pages_taxonomy_term_page($term) {
  return taxonomy_term_page($term);
}

/**
 * Implements hook_preprocess_page().
 */
function gbif_pages_preprocess_page(&$variables) {
  /**
   * Changing the width of menu tabs in capacity enhancement to fit more.
   *
	$capacity_pages = array(
		'node/226', // capacity-enhancement/summary
		'node/3669', // capacity-enhancement/support-programme
		'node/230', // capacity-enhancement/regional-collaboration
		'node/227', // capacity-enhancement/training
		'node/229', // capacity-enhancement/capacity-programmes
		'node/10270', // capacity-enhancement/current-projects
		'node/3672', // capacity-enhancement/past-projects
	);
	if (in_array(current_path(), $capacity_pages)) {
		if (isset($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs'])) {
			foreach ($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'] as $k => $tab) {
				if (gettype($k) == 'integer') {
					array_push($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'][$k]['#attributes']['class'], 'narrow-tab');
					watchdog('gbif_pages', 'Extra class in capacity pages set.', NULL, WATCHDOG_DEBUG);
				}
			}
		}
	}
  */

  // Highlighting the menu tab for BID updates.
  $bid_updates = array(
    'node/82183', // bid/actualites-sur-le-programme-BID-1
    'node/82184', // bid/atualizacao-sobre-o-programa-BID-1
    'node/82185', // bid/update-on-the-BID-programme-1
  );
  if (in_array(current_path(), $bid_updates)) {
    if (isset($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs'])) {
      foreach ($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'] as $k => $tab) {
        if (gettype($k) == 'integer') {
          array_push($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'][$k]['#attributes']['class'], 'active');
          watchdog('gbif_pages', 'Setting tab for BID updates', NULL, WATCHDOG_DEBUG);
        }
      }
    }
  }

}

function gbif_pages_preprocess_node(&$variables) {
  if ($variables['type'] == 'page' || $variables['type'] == 'generictemplate') {
    // check if the body input format is markdown.
    $markdown = FALSE;
    foreach ($variables['body'] as $body) {
      if ($body['format'] == 'parsedown') {
        $markdown = TRUE;
      }
    }
    $variables['markdown'] = $markdown;
  }
}

/**
 * Override for search_view().
 * @see modules/search/search_pages.inc.
 * @see https://drupal.org/node/708590.
 */
function gbif_pages_search_view($module = NULL, $keys = '') {
  $info = FALSE;
  $keys = trim($keys);
  // Also try to pull search keywords out of the $_REQUEST variable to
  // support old GET format of searches for existing links.
  if (!$keys && !empty($_REQUEST['keys'])) {
    $keys = trim($_REQUEST['keys']);
  }

  if (!empty($module)) {
    $active_module_info = search_get_info();
    if (isset($active_module_info[$module])) {
      $info = $active_module_info[$module];
    }
  }

  if (empty($info)) {
    // No path or invalid path: find the default module. Note that if there
    // are no enabled search modules, this function should never be called,
    // since hook_menu() would not have defined any search paths.
    $info = search_get_default_module_info();
    // Redirect from bare /search or an invalid path to the default search path.
    $path = 'search/' . $info['path'];
    if ($keys) {
      $path .= '/' . $keys;
    }
    drupal_goto($path);
  }

  // Default results output is an empty string.
  $results = array('#markup' => '');
  // Process the search form. Note that if there is $_POST data,
  // search_form_submit() will cause a redirect to search/[module path]/[keys],
  // which will get us back to this page callback. In other words, the search
  // form submits with POST but redirects to GET. This way we can keep
  // the search query URL clean as a whistle.
  if (empty($_POST['form_id']) || $_POST['form_id'] != 'search_form') {
    $conditions =  NULL;
    if (isset($info['conditions_callback']) && function_exists($info['conditions_callback'])) {
      // Build an optional array of more search conditions.
      $conditions = call_user_func($info['conditions_callback'], $keys);
    }
    // Only search if there are keywords or non-empty conditions.
    if ($keys || !empty($conditions)) {
      // Log the search keys.
      watchdog('search', 'Searched %type for %keys.', array('%keys' => $keys, '%type' => $info['title']), WATCHDOG_NOTICE, l(t('results'), 'search/' . $info['path'] . '/' . $keys));

      // Collect the search results.
      $results = search_data($keys, $info['module'], $conditions);
    }
  }
  // The form may be altered based on whether the search was run.
  $build['search_form'] = drupal_get_form('search_form', NULL, $keys, $info['module']);
  $build['search_results'] = $results;

  return $build;	
}

function gbif_pages_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'generictemplate_node_form':
      $form['body']['#suffix'] = '<p>' . t('For full-width images, please use 877 pixels as the width and make sure the dimensions are provided in the "Appearance" tab of the image dialogue box.') . '</p>';
      break;
    case 'user_login':
      $form['actions']['submit']['#value'] = t('Login');
      break;
    case 'user_profile_form':
      break;
  }
}

/**
 * Manually set the highlighted_title here instead of in the theme for orphaned
 * pages.
 * This reduces dependency on the theme.
 * @param $page
 */
function gbif_pages_page_build(&$page) {
	$status = drupal_get_http_header("status");
	$jobs_adverts = array('node/82115', 'node/82116', 'node/82117', 'node/82162');
  $bid_updates = array('node/82183', 'node/82184', 'node/82185');
	if ($status == '404 Not Found') {
		// Do nothing.
	}
	elseif (in_array(current_path(), $jobs_adverts)) {
		$page['highlighted_title'] = array(
			'name' => t('GBIF Newsroom'),
			'description' => t('News and events from around the GBIF community'),
		);
	}
  elseif (in_array(current_path(), $bid_updates)) {
    $page['highlighted_title'] = array(
      'name' => t('Biodiversity Information for Development'),
      'description' => t('Enhancing capacity, availability and use of biodiversity information for policy and human well-being'),
    );
  }
}