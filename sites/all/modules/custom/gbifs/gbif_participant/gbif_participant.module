<?php
/**
 * @file
 * gbif_participant.module
 */

/**
 * Implements hook_menu().
 */
function gbif_participant_menu() {
	$items['country'] = array(
		'title' => t('Countries, territories and islands'),
		'description' => 'The entrance page for GBIF Participant countries',
		'page callback' => 'gbif_participant_page_router',
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
		'menu-name' => 'country-page',
	);
	$items['admin/config/gbif/participant'] = array(
		'title' => 'GBIF participant',
		'description' => t('Configure GBIF participant related features.'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('gbif_participant_settings_form'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'gbif_participant.admin.inc',
	);
	return $items;
}

/**
 * Implements hook_help().
 */
function gbif_participant_help($path, $arg) {
  if ($path == 'admin/help#gbif_participant') {
    return t('Managing and displaying information regarding GBIF Participants.');
  }
}

/**
 * Implements hook_node_info()
 */
function gbif_participant_node_info() {
	$items = array(
		'gbif_participant' => array(
			'name' => t('GBIF Participant'),
			'base' => 'gbif_participant',
			'description' => t('A GBIF Participant profile that contains descriptive information that is shown on the country pages.'),
			'has_title' => TRUE,
			'title_label' => t('GBIF Participant Title'),
			'has_body' => FALSE,
			'body_label' => t('Custom body text'),
			'locked' => TRUE, // Unchangeable from UI.
			'node-preview' => 1,
			'node-options' => array(),
			'node-submitted' => 0,
			'language_content_type' => '1',
			'comment' => array(
				'status' => 0,
				'default-mode' => 0,
				'anonymous' => 2,
				'default-per-page' => 30,
				'form-location' => 0,
				'preview' => 2,
				'subject-field' => 0,
			),
			'menu' => array(
				'options' => array('gbif-menu'),
				'parent' => 'gbif-menu:0',
			),
		),
	);
	return $items;
}

/**
 * Implements hook_form()
 * Provide the title field in the form when editing.
 */
function gbif_participant_form($node, $form_state) {
	$type = node_type_get_type($node);
	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => check_plain($type->title_label),
		'#default_value' => !empty($node->title) ? $node->title : '',
		'#required' => TRUE,
	);
	return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gbif_participant_form_gbif_participant_node_form_alter(&$form, &$form_state) {
	// $participantID and $iso2 are keys to link IMS tables so we prevent users
	// from editing.
	$form['gp_id']['#disabled'] = TRUE;
	$form['gp_iso2']['#disabled'] = TRUE;
}

/**
 * Implements hook_theme().
 */
function gbif_participant_theme($existing, $type, $theme, $path) {
	$path = drupal_get_path('module', 'gbif_participant');
	return array(
		'gbif_participant_countries' => array(
			'template' => 'countries',
			'path' => $path . '/theme',
			'variables' => array('country_list' => NULL),
		),
		'gbif_participant_summary' => array(
			'template' => 'summary',
			'path' => $path . '/theme',
			'variables' => array(
				'participantID' => NULL,
				'iso2' => NULL,
				'node' => NULL,
				'participant_ims' => NULL,
				'html' => NULL,
				'registry_json' => NULL,
			),
		),
		'gbif_participant_about' => array(
			'template' => 'about',
			'path' => $path . '/theme',
			'variables' => array('participantID' => NULL, 'iso2' => NULL, 'node' => NULL, 'participant_ims' => NULL, 'html' => NULL),
		),
		'gbif_participant_publishing' => array(
			'template' => 'publishing',
			'path' => $path . '/theme',
			'variables' => array('participantID' => NULL, 'iso2' => NULL, 'node' => NULL, 'participant_ims' => NULL, 'html' => NULL),
		),
		'node__gbif_participant' => array(
			'template' => 'node--gbif_participant',
			'path' => $path . '/theme',
		),
		'gbif_participant_publishers' => array(
			'template' => 'publishers',
			'path' => $path . '/theme',
			'variables' => array('participantID' => NULL, 'iso2' => NULL, 'node' => NULL, 'participant_ims' => NULL, 'html' => NULL),
		),
		'gp_about_datasets' => array(
			'template' => 'about-datasets',
			'path' => $path . '/theme',
			'variables' => array('participantID' => NULL, 'iso2' => NULL, 'node' => NULL, 'participant_ims' => NULL, 'html' => NULL),
		),
		'gbif_participant_datasets_list_item' => array(
			'template' => 'datasets-list-item',
			'path' => $path . '/theme',
			'variables' => array(
				'datasets' => NULL,
				'env' => NULL,
				'iso2' => NULL,
				'mode' => NULL,
			),
		),
		'gp_largest_datasets_list_item' => array(
			'template' => 'largest-datasets-list-item',
			'path' => $path . '/theme',
			'variables' => array(
				'datasets' => NULL,
				'env' => NULL,
				'iso2' => NULL,
				'mode' => NULL,
			),
		),
		'gbif_participant_publishers_list_item' => array(
			'template' => 'publishers-list-item',
			'path' => $path . '/theme',
			'variables' => array(
				'publishers' => NULL,
				'env' => NULL,
				'mode' => NULL,
			),
		),
		'gbif_participant_news' => array(
			'template' => 'news',
			'path' => $path . '/theme',
			'variables' => array('participantID' => NULL, 'iso2' => NULL, 'node' => NULL, 'participant_ims' => NULL, 'html' => NULL),
		),
		'gbif_participant_publications' => array(
			'template' => 'publications',
			'path' => $path . '/theme',
			'variables' => array('participantID' => NULL, 'iso2' => NULL, 'node' => NULL, 'participant_ims' => NULL, 'html' => NULL),
		),
	);
}

/**
 * Implements hook_menu_block_tree_alter().
 * This does not seem to be working. It gets overridden afterwards.
 */
function gbif_participant_menu_block_tree_alter(&$tree, &$config) {
	if (isset($config) && $config['menu_name'] == 'menu-country') {
		foreach ($tree as $k => $link) {
			$path = explode('/', $link['link']['link_path']);
			$iso2 = arg(1);
			$new_path = $path[0] . '/' . $iso2 . '/' . $path[1];
			$tree[$k]['link']['link_path'] = $new_path;
		}
	}
}

/**
 * Implements hook_preprocess_page().
 */
function gbif_participant_preprocess_page(&$variables) {
	if (isset($variables)) {
		// Check if it's a participant.
		$results = _gbif_participant_participant_query(NULL, arg(1));

		// Preprocess for the menu tabs.
		if (isset($variables['page']['menu']['menu_block_gbif_navigation_country_page'])) {
			foreach ($variables['page']['menu']['menu_block_gbif_navigation_country_page']['#content'] as $k => $tab) {
				if (gettype($k) == 'integer') {
					$path = explode('/', $tab['#href']);
					$iso2 = arg(1);
					$new_path = $path[0] . '/' . $iso2 . '/' . $path[1];
					$variables['page']['menu']['menu_block_gbif_navigation_country_page']['#content'][$k]['#href'] = $new_path;
				}
				// If it's not a participant, take the participation menu tab away.
				if (gettype($k) == 'integer' && $tab['#title'] == 'Participation' && count($results) == 0) {
					unset($variables['page']['menu']['menu_block_gbif_navigation_country_page']['#content'][$k]);
				}
				// If on the list of publisher, highlight the tab with class '.back-menu'.
				$current_path = current_path();
				if (gettype($k) == 'integer' && $tab['#title'] == 'Participation' && drupal_match_path($current_path, '*/'. $iso2 . '/publishers')) {
					$variables['page']['menu']['menu_block_gbif_navigation_country_page']['#content'][$k]['#attributes']['class'][] = 'back-menu';
				}
				if (gettype($k) == 'integer' && $tab['#title'] == 'Data About' && drupal_match_path($current_path, '*/'. $iso2 . '/about/datasets')) {
					$variables['page']['menu']['menu_block_gbif_navigation_country_page']['#content'][$k]['#attributes']['class'][] = 'back-menu';
				}
			}
		}
	}
}

/**
 * Implements hook_preprocess_node().
 */
function gbif_participant_preprocess_node(&$variables) {
	if (isset($variables) && $variables['type'] == 'gbif_participant') {
		$gp_id = field_get_items('node', $variables['node'], 'gp_id');
		$participantID = $gp_id[0]['value'];
		$participant = _gbif_participant_participant_query($participantID);
		$participant = $participant[0];

		$country = gbif_participant_country_lookup($participant->iso2, 'iso2', 'title');
		$participant->country = $country->name;
		$variables['participant_ims'] = $participant;
		$variables['participant_node'] = array();

		// Format the date to only show year.
		$timestamp = strtotime($variables['participant_ims']->member_as_of);
		$year = date('Y', $timestamp);
		$variables['participant_ims']->member_as_of = $year;

		$timestamp = strtotime($variables['elements']['gp_node_established']['#items'][0]['value']);
		if ($timestamp != FALSE) {
			$year = date('Y', $timestamp);
			$variables['participant_node']['node_established'] = $year;
		}

		// Get the rest of the information from the Registry API.
		// @todo This has to be cleaned up so it's constructed from IMS tables.
		$json = _gbif_participant_get_registry_participant($participantID);

		// GBIF region
		$region = $json->gbifRegion;
		$variables['participant_ims']->gbif_region = _gbif_participant_print_region($region);

		// Contacts
		$contacts = $json->contacts;
		$variables['participant_ims']->contact_participation = _gbif_participant_print_contacts('participation', $contacts, $participant->iso2);
		$variables['participant_ims']->contact_contacts = _gbif_participant_print_contacts('contacts', $contacts, $participant->iso2);

		// Endorsed publishers
		$variables['participant_ims']->endorsed_publishers = _gbif_participant_print_endorsed_publishers($participantID, $participant->iso2, 'digest');

		// Social media
		if (count($variables['gp_comm_social']) != 0) {
			$variables['participant_node']['social_media'] = _gbif_participant_format_social_media($variables['gp_comm_social']);
		}
	}
}

/**
 * @todo Build an integrated participant data array from IMS, the Registry and Drupal.
 */
function gbif_participant_data_build($gp_id, $iso2) {

}

/**
 * Implements hook_page_build().
 */
function gbif_participant_page_build(&$page) {
	if (isset($page) && arg(0) == 'country') {
		// Prepare the text for use in the banner region.
		// @todo To move this into an earlier phase of processing.
		$results = _gbif_participant_participant_query(NULL, arg(1));
		if (arg(1) == NULL && arg(2) == NULL) {
			$title = t('Countries, territories and islands');
			$slogan = '';
		}
		elseif (count($results) == 0) {
			$country = countries_country_lookup(arg(1), 'iso2');
			$title = $country->name;
			$slogan = '';
		}
		elseif (count($results) == 1) {
			$gbif_membership = $results[0]->gbif_membership;
			$participantID = $results[0]->participantID;

			$json = _gbif_participant_get_registry_participant($participantID);
			$region = _gbif_participant_format_region($json->gbifRegion);
			$entity_query = new EntityFieldQuery();
			$entity_query->entityCondition('entity_type', 'node')
				->entityCondition('bundle', 'gbif_participant')
				->fieldCondition('gp_id', 'value', $participantID, '=');
			$entity_query->execute();
			$nid = $entity_query->ordered_results[0]->entity_id;
			$node = node_load($nid);

			$title = $node->title;
			$slogan = t('A GBIF !gbif_membership from !region', array('!gbif_membership' => $gbif_membership, '!region' => $region)) . '<br>';
		}
		$slogan .= t('Names of countries, territories and islands are based on the !url standard.', array('!url' => l('ISO 3166-1', 'https://www.iso.org/obp/ui/#search')));
		$page['highlighted_title'] = array(
			'name' => $title,
			'description' => $slogan,
		);
	}
}

/**
 * Decide what to render according to the requested path.
 * @param $iso2
 * @param $chapter
 * @return int|null|string
 */
function gbif_participant_page_router($iso2, $chapter) {

	if (!isset($iso2) && !isset($chapter)) {
		$columns = _gbif_participant_country_list();
		return theme('gbif_participant_countries', array('columns' => $columns));
	}
	elseif (isset($iso2) && !isset($chapter)) {
		drupal_goto('country/' . $iso2 . '/summary');
	}
	elseif (isset($iso2) && isset($chapter)) {
		// Use ISO 2-digit code to look up the content about the participation.
		$results = _gbif_participant_participant_query(NULL, $iso2);
		if (count($results) > 1) {
			return t('We are working on the information regarding this participant. Please come back later. We are sorry for the inconvenience.');
		}
		elseif (count($results) <= 1) {
			// Find the nid.
			$participantID = $results[0]->participantID;

			$entity_query = new EntityFieldQuery();
			$entity_query->entityCondition('entity_type', 'node')
				->entityCondition('bundle', 'gbif_participant')
				->fieldCondition('gp_id', 'value', $participantID, '=');
			$entity_query->execute();

			$registry_json = _gbif_participant_get_registry_participant($participantID);

			// Make sure there is only one node returned.
			if (isset($entity_query->ordered_results) && count($entity_query->ordered_results) == 1) {
				$nid = $entity_query->ordered_results[0]->entity_id;
				$node = node_load($nid);
			}

			// Todo: We might need the $node object for other chapters in the future.
			switch ($chapter) {
				case 'summary':
					$html = _gbif_participant_country_data($iso2, $results[0]);
					$html['latest_dataset'] = _gbif_participant_print_latest_datasets($iso2, NULL);
					return theme('gbif_participant_summary', array(
						'participantID' => $participantID,
						'iso2' => $iso2,
						'node' => $node,
						'participant_ims' => $results[0],
						'html' => $html,
						'registry_json' => $registry_json,
					));
				case 'about':
					if (arg(3) == 'datasets') {
					$html = array();
					$largest_dataset = _gbif_participant_print_largest_datasets($iso2, 'full');
					$html = array_merge($html, $largest_dataset);
						return theme('gp_about_datasets', array(
							'participantID' => $participantID,
							'iso2' => $iso2,
							'node' => $node,
							'participant_ims' => $results[0],
							'html' => $html,
						));
					}
					else {
						$html = _gbif_participant_country_data($iso2, $results[0]);
						$largest_dataset = _gbif_participant_print_largest_datasets($iso2, 'digest');
						$html = array_merge($html, $largest_dataset);
						return theme('gbif_participant_about', array(
							'participantID' => $participantID,
							'iso2' => $iso2,
							'node' => $node,
							'participant_ims' => $results[0],
							'html' => $html,
						));
					}
				case 'publishing':
					$html = _gbif_participant_country_data($iso2, $results[0]);
					return theme('gbif_participant_publishing', array(
						'participantID' => $participantID,
						'iso2' => $iso2,
						'node' => $node,
						'participant_ims' => $results[0],
						'html' => $html,
					));
				case 'participation':
					$page = node_page_view($node);
					return print drupal_render_page($page);
				case 'publishers':
					$html = _gbif_participant_print_endorsed_publishers($participantID, $iso2, 'full');
					return theme('gbif_participant_publishers', array(
						'participantID' => $participantID,
						'iso2' => $iso2,
						'node' => $node,
						'ims_result' => $results[0],
						'html' => $html,
					));
				case 'news':
					return theme('gbif_participant_news', array('participantID' => $participantID, 'iso2' => $iso2, 'node' => $node, 'participant_ims' => $results[0]));
				case 'publications':
					return theme('gbif_participant_publications', array('participantID' => $participantID, 'iso2' => $iso2, 'node' => $node, 'ims_result' => $results[0]));
			}

		}
	}
	return 'Generic rendering.';
}

/**
 * Populate or update participant information from IMS tables.
 */
function gbif_participant_populate() {
	$participants = _gbif_participant_participant_query();

	$checkbit = array();
	foreach ($participants as $participant) {
		// We want to check whether a record with the same participantID is already
		// populated.
		$entity_query = new EntityFieldQuery();
		$entity_query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'gbif_participant')
			->fieldCondition('gp_id', 'value', $participant->participantID, '=')
			->count();
		$count = $entity_query->execute();

		// According to the count we decide to insert, update, or do nothing.
		// At the end we insert a check bit for messaging the UI.
		if (isset($count)) {
			switch ($count) {
				case 0:
					// If $count = 0, we for now only populate title and participantID.
					// @todo Populate all IMS fields when content type is complete.
					$node = new stdClass();
					$node->type = 'gbif_participant';
					node_object_prepare($node);
					$node->language = LANGUAGE_NONE;
					$node->title = $participant->participant_name_full;
					$node->gp_id[$node->language][0]['value'] = $participant->participantID;
					$node->gp_iso2[$node->language][0]['value'] = $participant->iso2;
					$node = node_submit($node);
					node_save($node);

					$checkbit[$participant->participantID] = 'inserted';
					break;

				case 1:
					// If there is one record then we update fields from the IMS.
					$checkbit[$participant->participantID] = 'updated';
					break;

				default:
					// If there are more than 1 record, then something went wrong so we don't
					// create any new node here.
					$checkbit[$participant->participantID] = 'warning';
			}
		}
	}

	$result = array_count_values($checkbit);

	// Determine the message for UI.
	if (isset($result['updated']) && $result['updated'] == count($checkbit)) {
		return t('All @count participant records updated.', array('@count' => $result['updated']));
	}
	elseif (isset($result['inserted']) && $result['inserted'] == count($checkbit)) {
		return t('All @count participant records inserted.', array('@count' => $result['inserted']));
	}
	else {
		$message = t('There are ');
		if (isset($result['insert'])) {
			$inserted_text = format_plural(
				$result['insert'],
				'1 participant record inserted',
				'@count participant records inserted',
				array('@count' => $result['insert'])
			);
			$message .= $inserted_text;
			if (isset($result['update'])) {
				$message .= ', and ';
			}
			else {
				$message .= '.';
			}
		}
		if (isset($result['updated'])) {
			$updated_text = format_plural(
				$result['updated'],
				'1 participant record updated',
				'@count participant records updated',
				array('@count' => $result['updated'])
			);
			$message .= $updated_text;
			if (isset($result['warning'])) {
				$message .= ', and';
			}
			else {
				$message .= '.';
			}
		}
		if (isset($result['warning'])) {
			$warning_text = format_plural(
				$result['warning'],
				'1 participant record has duplicate(s)',
				'@count participant records have duplicate(s)',
				array('@count' => $result['warning'])
			);
			$message .= $warning_text;
		}
		return $message;
	}
}

/**
 * @todo Use local json to produce the list.
 * @todo Use http://api.gbif.org/v1/enumeration/country for the source.
 * @return mixed
 */
function gbif_participant_country_query() {
	$query = db_select('gbif_ims_country', 'c');
	$query->leftjoin('gbif_ims_participant', 'p', 'p.countryID = c.countryID');
	$query->addField('p', 'participantID', 'participantID');
	$query->addField('c', 'name', 'country_name_full');
	$query->addField('p', 'name_full', 'participant_name_full');
	$query->addField('p', 'gbif_membership');
	$query->addField('c', 'iso2', 'iso2');
	$result = $query->execute()->fetchAll();
	return $result;
}

function _gbif_participant_participant_query($participantID = NULL, $iso2 = NULL) {
	$query = db_select('gbif_ims_participant', 'p');
	$query->join('gbif_ims_node', 'n', 'n.participantID = p.participantID');
	$query->leftjoin('gbif_ims_country', 'c', 'p.countryID = c.countryID');
	$query->leftjoin('gbif_ims_institution', 'i', 'i.institutionID = p.institutionID');
	$query->addField('p', 'participantID', 'participantID');
	$query->addField('p', 'name_full', 'participant_name_full');
	$query->addField('p', 'name_short', 'participant_abbrev');
	$query->addField('p', 'member_as_of');
	$query->addField('p', 'gbif_membership');
	$query->addField('p', 'mou2012_date');
	$query->addField('c', 'iso2', 'iso2');
	$query->addField('n', 'name_full', 'node_name_full');
	$query->addField('n', 'url', 'node_url');
	$query->addField('i', 'name', 'institution_name');
	$query->addField('i', 'address', 'institution_address');
	$query->addField('i', 'city', 'institution_city');
	$query->addField('i', 'zip_code', 'institution_zip_code');
	$query->addField('i', 'state_province', 'institution_state_province');
	$query->addField('i', 'telephone', 'institution_telephone');
	$query->addField('i', 'email', 'institution_email');
	if (isset($participantID)) {
		$query->condition('p.participantID', $participantID, '=');
	}
	// For country pages, we only query country participants plus Chinese Taipei.
	if (isset($iso2) && $iso2 <> 'TW') {
		$query->condition('c.iso2', $iso2, '=');
		$query->condition(db_or()->condition('p.gbif_membership', array('Associate Country Participant', 'Voting Participant'), 'IN'));
	}
	elseif (isset($iso2) && $iso2 == 'TW') {
		$query->condition('c.iso2', $iso2, '=');
		$query->condition('p.gbif_membership', array('Other Associate Participant'), 'IN');
	}
	$result = $query->execute()->fetchAll();
	return $result;
}

/**
 * Temporary helper function. Mainly for formatting.
 * @todo Once the new IMS is ready, values should come from Drupal fields
 * by render().
 */
function _gbif_participant_print_address_fields($value) {
	if (!empty($value)) {
		$value = $value . '<br>';
	}
	return $value;
}

/**
 * Helper function for rendering contacts.
 * @param $position: where on the template the contacts will be.
 * 				because they have different rendering styles.
 * @todo Emit proper URLs for contacts.
 * @todo Rewire the IMS tables for contacts.
 */
function _gbif_participant_print_contacts($position, $contacts, $iso2) {
	$contact_url_base = '/country/' . $iso2 . '/participation';
	$html = '';
	switch ($position) {
		case 'participation':
			foreach ($contacts as $contact) {
				switch ($contact->type) {
					case 'HEAD_OF_DELEGATION':
						$html .= '<h3>Head of Delegation</h3>';
						$html .= '<p>';
						$html .= '<a href="' . $contact_url_base . '#contact' . $contact->key . '">';
						$html .= $contact->firstName . ' ' . $contact->lastName;
						$html .= '</a>';
						$html .= '</p>';
						break;
					case 'NODE_MANAGER':
						$html .= '<h3>Participant Node Manager</h3>';
						$html .= '<p>';
						$html .= '<a href="' . $contact_url_base . '#contact' . $contact->key . '">';
						$html .= $contact->firstName . ' ' . $contact->lastName;
						$html .= '</a>';
						$html .= '</p>';
						break;
				}
			}
			break;
		case 'contacts':
			// Sort the contacts 1) by role; 2) by last name.
			$roles = array('HEAD_OF_DELEGATION', 'TEMPORARY_HEAD_OF_DELEGATION', 'ADDITIONAL_DELEGATE', 'NODE_MANAGER', 'NODE_STAFF');
			//uasort($contacts, function($a, $b) { return $a->lastName - $b->lastName; });
			usort($contacts, function($a, $b) use ($roles) {
				if ($a->type == $b->type) {
					// Type is the same, sort by lastName
					if ($a->lastName == $b->lastName) return 0;
					return $a->lastName < $b->lastName ? -1 : 1;
				}
				return array_search($a->type, $roles) - array_search($b->type, $roles);
			});

			$html .= '<table class="table table-curved"><tbody>';
			foreach ($contacts as $contact) {
			  $html .= '<tr>';
				$html .= '<td>';
				$html .= '<address>';
				$html .= '<div class="contactName">' . $contact->firstName . ' ' . $contact->lastName . '</div>';
				$html .= '<div style="display: block;">';
				$html .= '<div class="contactPosition">' . $contact->position[0] . '</div>';
				$html .= '<div class="address">';

					$html .= '<span>' . $contact->organization . '</span>';
					$html .= '<span>';
					for ($i = 0; $i < count($contact->address); $i++) {
						$html .= $contact->address[$i];
						if ($i < count($contact->address)) $html .= '<br>';
					}
					$html .= '</span>';
					$html .= '<span class="city">' . $contact->postalCode . ' ' . $contact->city . '</span>';
					$country = countries_country_lookup($contact->country, 'iso2');
					$html .= '<span class="country">' . $country->name . '</span>';
					$html .= '<span class="email"><a href="mailto:' . $contact->email[0] . '" title="email">' . $contact->email[0] . '</a></span>';
					$html .= '<span class="phone">';
					for ($i = 0; $i < count($contact->phone); $i++) {
						$html .= $contact->phone[$i];
						if ($i < count($contact->phone)) $html .= '<br>';
					}
					$html .= '</span>';

				$html .= '</div>';
				$html .= '</address>';
				$html .= '</td>';
				$html .= '<td>' . '<a id="contact' . $contact->key . '"></a>' . _gbif_participant_format_role($contact->type) . '</td>';
				$html .= '</tr>';
			}
			$html .= '</tbody></table>';
			break;
	}
	return $html;
}

/**
 * Helper function for rendering GBIF region.
 */
function _gbif_participant_print_region($region) {
	$html = '';
	$html .= '<h3>GBIF Region</h3>';
	$html .= '<p>';
	$html .= _gbif_participant_format_region($region);
	$html .= '</p>';
	return $html;
}

/**
 * Helper function for getting the list of endorsed publishers for
 * a participant.
 * @param $mode 'full', 'digest'
 * @see http://knackforge.com/blog/sabareesh/creating-pager-drupal-without-dbselect-and-pagerdefault
 */
function _gbif_participant_print_endorsed_publishers($participantID, $iso2, $mode) {
	$env = variable_get('environment_settings');
	$api_call = _gbif_participant_api_registry_node() . '/' . _gbif_participant_get_uuid($participantID) . '/organization?limit=1000';
	$json = json_decode(file_get_contents($api_call), TRUE);
	$count = $json['count'];
	$publishers = $json['results'];
	$output = array();

	switch ($mode) {
		case 'full':
			$per_page = 25;
			$current_page = pager_default_initialize($count, $per_page);
			$chunks = array_chunk($publishers, $per_page, TRUE);
			$html = theme('gbif_participant_publishers_list_item', array('publishers' => $chunks[$current_page], 'env' => $env, 'mode' => $mode));
			$html .= '<hr>';
			$html .= theme('pager', array('page', count($publishers)));

			$title = $count;
			$title .= format_plural($count,
				' endorsed data publisher for ',
				' endorsed data publishers for ',
				array()
			);
			$title .= gbif_participant_country_lookup($iso2, 'iso2', 'title');
			$output['title'] = $title;
			break;

		case 'digest':
			$first_ten = array_slice($publishers, 0, 10, TRUE);
			$html = theme('gbif_participant_publishers_list_item', array('publishers' => $first_ten, 'env' => $env, 'mode' => $mode));
			if ($count > 10) {
				$remain_count = $count - 10;
				$link_more = l($remain_count . ' more', 'country/' . $iso2 . '/publishers');
				$html .= $link_more . '...';
			}
			break;
	}

	$output['list'] = $html;

	return $output;
}

function _gbif_participant_print_latest_datasets($iso2, $mode) {
	$env = variable_get('environment_settings');
	$api_call = _gbif_participant_api_dataset() . '/search?limit=7&publishingCountry=' . $iso2;
	$json = json_decode(file_get_contents($api_call), TRUE);
	$count = $json['count'];
	$datasets = $json['results'];

	foreach ($datasets as &$dataset) {
		$dataset['type_formatted'] = _gbif_participant_format_datatype($dataset['type']);
		switch ($dataset['type']) {
			case 'OCCURRENCE':
				$count_call = $env['gbif_api_base_url'] . '/v' . $env['gbif_api_version'] . '/occurrence/count?datasetKey=' . $dataset['key'];
				$dataset['occurrence_count'] = json_decode(file_get_contents($count_call), TRUE);
				$geo_call = $env['gbif_api_base_url'] . '/v' . $env['gbif_api_version'] . '/occurrence/count?datasetKey=' . $dataset['key'] . '&isGeoreferenced=true';
				$dataset['occurrence_geo'] = json_decode(file_get_contents($geo_call), TRUE);
				break;
			case 'CHECKLIST': // http://api.gbif.org/v1/dataset/66dd0960-2d7d-46ee-a491-87b9adcfe7b1/metrics
				$metrics_call = $env['gbif_api_base_url'] . '/v' . $env['gbif_api_version'] . '/dataset/' . $dataset['key'] . '/metrics';
				$dataset['checklist_metrics'] = json_decode(file_get_contents($metrics_call), TRUE);
				break;
		}
	}

	$output = theme('gbif_participant_datasets_list_item', array('datasets' => $datasets, 'env' => $env, 'iso2' => $iso2, 'mode' => $mode));

	if ($count > 7) {
		$remain_count = $count - 7;
		$link_more = l($remain_count . ' more', $env['data_portal_base_url'] . '/dataset/search?publishingCountry=' . $iso2);
		$output .= $link_more . '...';
	}

	return $output;
}

function _gbif_participant_print_largest_datasets($iso2, $mode) {
	$env = variable_get('environment_settings');
	$api_call = _gbif_participant_api_occurrence() . '/counts/datasets?country=' . $iso2;
	$json = json_decode(file_get_contents($api_call), TRUE);
	$count = count($json);
	$datasets = $json;
	if ($mode == 'digest') {
		$datasets = array_slice($datasets, 0, 6, TRUE);
	}
	$country_title = gbif_participant_country_lookup($iso2, 'iso2', 'title');
	$output = array();

	foreach ($datasets as $k => &$dataset) {
		$d_count = $dataset;
		$d = array('count_within_country' => $d_count);
		$d['dataset_key'] = $k;

		// Get country name
		$d['country'] = $country_title;

		// Get dataset metadata
		$d_call = _gbif_participant_api_dataset() . '/' . $k;
		$d_json = json_decode(file_get_contents($d_call), TRUE);

		$d['title'] = $d_json['title'];
		$d['description'] = $d_json['description'];
		$d['modified'] = $d_json['modified'];
		$d['type_formatted'] = _gbif_participant_format_datatype($d_json['type']);

		// Get dataset counts
		$d_call = _gbif_participant_api_occurrence() . '/count?datasetKey=' . $k;
		$d_json = json_decode(file_get_contents($d_call), TRUE);

		$d['occurrence_count'] = $d_json;
		$percentage = $d['count_within_country'] / $d['occurrence_count'];
		$d['percentage'] = number_format((float)$percentage, 2, '.', '');

		$dataset = $d;
	}

	switch ($mode) {
		case 'full':
			$per_page = 25;
			$current_page = pager_default_initialize($count, $per_page);
			$chunks = array_chunk($datasets, $per_page, TRUE);
			$html = theme('gp_largest_datasets_list_item', array('datasets' => $chunks[$current_page], 'env' => $env, 'iso2' => $iso2, 'mode' => $mode));
			$html .= '<hr>';
			$html .= theme('pager', array('page', count($datasets)));

			$title = $count;
			$title .= format_plural($count,
				' occurrence dataset about ',
				' occurrence datasets about ',
				array()
			);
			$title .= $country_title;
			$output['largest_datasets_title'] = $title;

			$link_back = t('Back to data about !country', array('!country' => $country_title));
			$link_back = l($link_back, 'country/' . $iso2 . '/about');
			$output['link_back'] = $link_back;

			break;

		case 'digest':
			$output['largest_datasets_title'] = t('Largest occurrence datasets about') . ' ' . $country_title;
			$html = theme('gp_largest_datasets_list_item', array('datasets' => $datasets, 'env' => $env, 'iso2' => $iso2, 'mode' => $mode));
			if ($count > 6) {
				$remain_count = $count - 6;
				$link_more = l($remain_count . ' more', 'country/' . $iso2 . '/about/datasets');
				$html .= $link_more . '...';
			}
			break;
	}

	$output['largest_datasets_list'] = $html;

	return $output;
}

/**
 * Helper function for getting the corresponding participant info from
 * the Registry.
 * @param int $pid Participant ID
 */
function _gbif_participant_get_registry_participant($pid) {
	$uuid = _gbif_participant_get_uuid($pid);
	$p_call = _gbif_participant_api_registry_node() . '/' . $uuid;
	$json = json_decode(file_get_contents($p_call));
	return $json;
}

/**
 * Helper function for getting the UUID of the participant.
 */
function _gbif_participant_get_uuid($participantID) {
	$api_call = _gbif_participant_api_registry_node() . '?identifier=' . $participantID . '&identifierType=GBIF_PARTICIPANT';
	$json = json_decode(file_get_contents($api_call));
	$uuid = $json->results[0]->key;
	return $uuid;
}

/**
 * Helper function for constructing the root for Registry calls.
 */
function _gbif_participant_api_registry_node() {
	$env = variable_get('environment_settings');
	return $env['gbif_api_base_url'] . '/v' . $env['gbif_api_version'] . '/node';
}

function _gbif_participant_api_dataset() {
	$env = variable_get('environment_settings');
	return $env['gbif_api_base_url'] . '/v' . $env['gbif_api_version'] . '/dataset';
}

function _gbif_participant_api_occurrence() {
	$env = variable_get('environment_settings');
	return $env['gbif_api_base_url'] . '/v' . $env['gbif_api_version'] . '/occurrence';
}

/**
 * Helper function for formatting the region text.
 * @param $region
 */
function _gbif_participant_format_region($region) {
	$regions = array(
		'AFRICA' => t('Africa'),
		'ASIA' => t('Asia'),
		'EUROPE' => t('Europe'),
		'LATIN_AMERICA' => t('Latin America'),
		'NORTH_AMERICA' => t('North America'),
		'OCEANIA' => t('Oceania'),
	);
	return $regions[$region];
}

/**
 * Helper function for formatting the role text.
 */
function _gbif_participant_format_role($role) {
	$roles = array(
		'HEAD_OF_DELEGATION' => t('Head of Delegation'),
		'TEMPORARY_HEAD_OF_DELEGATION' => t('Temporary Head of Delegation'),
		'ADDITIONAL_DELEGATE' => t('Additional Delegate'),
		'NODE_MANAGER' => t('Node Manager'),
		'NODE_STAFF' => t('Node Staff'),
	);
	return $roles[$role];
}

function _gbif_participant_format_datatype($type) {
	$types = array(
		'OCCURRENCE' => t('Occurrence dataset'),
		'CHECKLIST' => t('Checklist dataset'),
	);
	return $types[$type];
}

/**
 * Helper function for formatting social media icons.
 */
function _gbif_participant_format_social_media($gp_comm_social) {
	$path = '/' . drupal_get_path('module', 'gbif_participant') . '/img/social_icons';
	$html = '<div class="social-media">';
	$html .= '<h3>Social Media</h3>';
	foreach ($gp_comm_social as $media) {
		$media_type = strtolower($media['title']);
		$html .= '<a href="' . $media['url'] . '" target="_blank">';
		$html .= '<img src="' . $path . '/' . $media_type . '.png">';
		$html .= '</a>';
	}
	$html .= '</div>';
	return $html;
}

/**
 * Helper function for getting counts for a country.
 * @todo Better calculation with 'limit'.
 */
function gbif_participant_country_count($iso2) {
	$counts = array();
	$calls = array(
		'dataset_about' => 'http://api.gbif.org/v1/occurrence/counts/datasets?country=',
		'occurrence_about' => 'http://api.gbif.org/v1/occurrence/count?country=',
		'checklist_about' => 'http://api.gbif.org/v1/dataset/search?limit=10000&type=CHECKLIST&country=',
		'metadata_about' => 'http://api.gbif.org/v1/dataset/search?limit=10000&type=METADATA&country=',
		'contributed_by' => 'http://api.gbif.org/v1/occurrence/counts/publishingCountries?country=',
		'dataset_from' => 'http://api.gbif.org/v1/dataset/search?limit=10000&type=OCCURRENCE&publishingCountry=',
		'occurrence_from' => 'http://api.gbif.org/v1/occurrence/count?publishingCountry=',
		'checklist_from' => 'http://api.gbif.org/v1/dataset/search?limit=10000&type=CHECKLIST&publishingCountry=',
		'metadata_from' => 'http://api.gbif.org/v1/dataset/search?limit=10000&type=METADATA&publishingCountry=',
		'contributing_to' => 'http://api.gbif.org/v1/occurrence/counts/countries?publishingCountry=',
	);
	foreach ($calls as $call_type => $call) {
		$json = json_decode(file_get_contents($call . $iso2));

		if (isset($json->count)) {
			$counts[$call_type . '_count'] = $json->count;
		}
		elseif (!in_array($call_type, array('occurrence_from', 'occurrence_about'))) {
			$counts[$call_type . '_count'] = count((array)$json);
		}

		if (in_array($call_type, array('checklist_about', 'checklist_from')) && isset($json->count)) {
			// Assuming there are results since count != 0.
			$usage_count = 0;
			foreach ($json->results as $k => $result) {
				$metrics_call = 'http://api.gbif.org/v1/dataset/' . $result->key . '/metrics';
				$metrics_json = json_decode(file_get_contents($metrics_call));
				$usage_count = $usage_count + $metrics_json->usagesCount;
			}
			$counts[$call_type . '_record_count'] = $usage_count;
		}

		if (in_array($call_type, array('dataset_about', 'contributed_by', 'contributing_to'))) {
			$record_count = 0;
			foreach ($json as $k => $v) {
				$record_count = $record_count + $v;
			}
			$counts[$call_type . '_record_count'] = $record_count;
		}

		switch ($call_type) {
			case 'occurrence_about':
				$counts['dataset_about_record_count'] = $json;
				break;
			case 'occurrence_from':
				$counts['dataset_from_record_count'] = $json;
				break;
		}

		$counts[$call_type] = $json;
	}
	ksort($counts);
	return $counts;
}

/**
 * Helper function for preparing HTML for data sections in country pages.
 */
function _gbif_participant_country_data($iso2, $participant_ims) {
	$data_types = array(
		'dataset' => array(
			'text' => t('occurrence dataset'),
			'about_dataset_url' => 'country/' . $iso2 . '/about/datasets',
			'about_dataset_query' => array(),
			'about_record_url' => 'occurrence/search',
			'about_record_query' => array('country' => $iso2),
			'from_dataset_url' => 'dataset/search',
			'from_dataset_query' => array('publishingCountry' => $iso2, 'type' => 'OCCURRENCE'),
			'from_record_url' => 'occurrence/search',
			'from_record_query' => array('publishingCountry' => $iso2),
		),
		'checklist' => array(
			'text' => t('checklist dataset'),
			'about_dataset_url' => 'dataset/search',
			'about_dataset_query' => array('country' => $iso2, 'type' => 'CHECKLIST'),
			'from_dataset_url' => 'dataset/search',
			'from_dataset_query' => array('publishingCountry' => $iso2, 'type' => 'CHECKLIST'),
		),
		'metadata' => array(
			'text' => t('metadata-only dataset'),
			'about_dataset_url' => 'dataset/search',
			'about_dataset_query' => array('country' => $iso2, 'type' => 'METADATA'),
			'from_dataset_url' => 'dataset/search',
			'from_dataset_query' => array('publishingCountry' => $iso2, 'type' => 'METADATA'),
		)
	);

	$counts = gbif_participant_country_count($iso2);

	$output = array();
	foreach (array('about', 'from') as $type) {
		$html = '';
		$html .= '<ul>';
		foreach ($data_types as $data_type => $attr) {
			$key_count = $data_type . '_' . $type . '_count';
			$key_record_count = $data_type . '_' . $type . '_record_count';
			if ($counts[$key_count] != 0) {
				// Dataset count item.
				$link_text_datasets = format_plural($counts[$key_count],
					'1 !type_text',
					'!count !type_text' . 's',
					array('!count' => number_format($counts[$key_count]), '!type_text' => $attr['text'])
				);
				$key_dataset_link = $type . '_dataset_url';
				$key_dataset_query = $type . '_dataset_query';
				$link_datasets = l($link_text_datasets, $attr[$key_dataset_link], array('query' => $attr[$key_dataset_query]));
				// Record count item when available.
				$link_text_records = format_plural($counts[$key_record_count],
					'1 record',
					'!count records',
					array('!count' => number_format($counts[$key_record_count]))
				);
				$key_record_link = $type . '_record_url';
				$key_record_query = $type . '_record_query';
				if (isset($attr[$key_record_link])) {
					$link_records = l($link_text_records, $attr[$key_record_link], array('query' => $attr[$key_record_query]));
				}
				else {
					$link_records = $link_text_records;
				}

				$html .= '<li>';
				$html .= $link_datasets . ' ' . t('with') . ' ' . $link_records;
				$html .= ($data_type == 'metadata' && $type == 'about') ? t(' relevant to !country', array('!country' => $participant_ims->participant_name_full)) : '';
				$html .= '.</li>';
			}
			else {
				$html .= '<li>';
				$html .= t('No ') . $attr['text'] . 's';
				$html .= ($data_type == 'metadata' && $type == 'about') ? t(' relevant to !country', array('!country' => $participant_ims->participant_name_full)) : '';
				$html .= '.</li>';
			}
		}

		switch ($type) {
			case 'about':
				// contributed by
				$link_text_contributed_by = format_plural($counts['contributed_by_count'],
					'1 country',
					'!count countries',
					array('!count' => number_format($counts['contributed_by_count']))
				);
				$link_text_contributed_by = l($link_text_contributed_by, 'country/' . $iso2 . '/about/countries');
				$link_text_contributed_by .= format_plural($counts['contributed_by_count'],
					' contributes data about !country',
					' contribute data about !country',
					array('!count' => number_format($counts['contributed_by_count']), '!country' => $participant_ims->participant_name_full)
				);
				$html .= '<li>' . $link_text_contributed_by . '.</li>';
				break;

			case 'from':
				// contributing to
				$html .= '<li>';
					$html .= t('!country publishes data covering ', array('!country' => $participant_ims->participant_name_full));
				$link_text_contributing_to = t('@count countries, territories and islands', array('@count' => $counts['contributing_to_count']));
				$link_contributing_to = l($link_text_contributing_to, 'country/' . $iso2 . '/publishing/countries');
				$html .= $link_contributing_to;
				$html .= '.</li>';
				break;
		}

		$html .= '</ul>';
		$output[$type] = $html;
  }
	return $output;
}

/**
 * Splits the provided JSON into an array of columns, sorted by the name.
 * @param $json which must be an array
 * @param $cols number of columns to split into
 * @return array of input data split into the columns
 */
function _gbif_participant_columular_countries($json, $cols) {
	// sort by country name
	usort($json, function($a, $b) {
		return (strnatcasecmp($a['title'], $b['title']));
	});

	$col_size = ceil(count($json) / $cols);
	return array_chunk($json, $col_size);
}

/**
 * Looking up in GBIF defined countries.
 * @param $value the value as the key to lookup
 * @param $query_type 'title', 'enumName', 'official', 'isNumerical', 'iso3', 'iso2'
 * @param $return_type 'title', 'enumName', 'official', 'isNumerical', 'iso3', 'iso2'
 */
function gbif_participant_country_lookup($value, $query_type, $return_type) {
	$result = '';
	$countries = json_decode(file_get_contents(drupal_get_path('module', 'gbif_participant') . '/country.json'), TRUE);
	foreach ($countries as $country) {
		if ($country[$query_type] == $value) $result = $country[$return_type];
	}
	return $result;
}

function _gbif_participant_country_list() {
	$countries = json_decode(file_get_contents(drupal_get_path('module', 'gbif_participant') . '/country.json'), TRUE);
	$participant_ims = _gbif_participant_participant_query();
	// Insert bits for determining if a country is a participant.
	foreach ($countries as $k => $country) {
		foreach ($participant_ims as $participant) {
			if ($country['iso2'] == $participant->iso2) {
				$countries[$k]['gbif_membership'] = $participant->gbif_membership;
			}
		}
	}
	$chunks = _gbif_participant_columular_countries($countries, 4);

	$columns = array();
	foreach ($chunks as $chunk) {
		$country_list = '<ul>';
		foreach ($chunk as $country) {
			if ($country['official'] == "true") {
				$link = l($country['title'], 'country/' . $country['iso2']);
				$country_list .= '<li class="country ';
				$country_list .= (!empty($country['gbif_membership'])) ? 'participant' : '';
				$country_list .= '">';
				$country_list .= $link;
				$country_list .= '</li>';
			}
		}
		$country_list .= '</ul>';
		$columns[] = $country_list;
	}

	return $columns;
}