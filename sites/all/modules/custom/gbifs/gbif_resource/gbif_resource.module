<?php
/**
 * @file
 * This module creates allows to create URLs like www.gbif.org/orc/?doc_id=1300, used in the GBIF website since 2011.
 */

module_load_include('inc', 'gbif_resource', 'gbif_resource.filemaker');

/**
 * @file
 * Code for the GBIF Resource feature.
 */

include_once 'gbif_resource.features.inc';

/**
 * Implements hook_menu().
 */
function gbif_resource_menu() {
	$items = array();
	$items['orc'] = array(
		'title' => t('Redirect'),
		'page callback' => 'gbif_resource_orc_redirect',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['resources/%'] = array(
		'title' => t('Old Drupal resource redirect'),
		'description' => 'Redirect old Drupal resource to the current one.',
		'page callback' => 'gbif_resource_redirect',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
  $items['publishing-data/resources'] = array(
    'title' => 'Resource about publishing data',
    'page callback' => 'gbif_resource_publishing_data',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'weight' => 30,
  );
  /* Disabled admin page since we no longer need to sync from the FileMaker.
  $items['admin/config/gbif/resource'] = array(
    'title' => 'GBIF resource',
    'description' => t('Configure GBIF resource related features.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gbif_resource_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gbif_resource.admin.inc',
  );
  */
	return $items;
}

/**
 * Handling URL redirection for individual resources and the old landing URL resources/summary.
 */
function gbif_resource_redirect() {
	$arg = arg();
	// Test if the path starts from the old style resource section.
	if ($arg[0] == 'resources' && $arg[1] !== 'summary') {
		$arg[1] = intval($arg[1]);
		if ($arg[1] != 0) { // This means the 2nd part of the path is a nid.
			// Look up which node carries this old resource_ims nid.
			$query = new EntityFieldQuery();
			$entities = $query->entityCondition('entity_type', 'node')
				->propertyCondition('type', 'resource')
				->propertyCondition('status', 1)
				->fieldCondition('gr_old_resource_nid', 'value', $arg[1], '=')
				->execute();
			if (!empty($entities['node'])) {
				$node = node_load(array_shift(array_keys($entities['node'])));
				$url = 'resource/' . $node->nid;
				drupal_goto($url);
			}
		}
	}
	elseif ($arg[1] == 'summary') {
		drupal_goto('resources');
	}
}

/**
 * Implements hook_library().
 * @return mixed
 */
function gbif_resource_library() {
  $path = drupal_get_path('module', 'gbif_resource');
  $libraries['lp'] = array(
    'title' => 'Latest resource block',
    'js' => array(
      $path . '/ng-app/target/js/main.bundle.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 100,
      )
    ),
    'css' => array(
      $path . '/ng-app/target/css/app.css' => array(
        'type' => 'file',
        'weight' => 20,
      ),
    )
  );
  return $libraries;
}

/**
 * Handling the redirection of the old style URLs of ORC.
 */
function gbif_resource_orc_redirect() {
	if ((isset($_GET['doc_id'])) && ($_GET['doc_id'] != '')) {
		// Find if a resource_ims exists with the __kp_ID registered.
		$query = new EntityFieldQuery();
		$entities = $query->entityCondition('entity_type', 'node')
			->propertyCondition('type', 'resource')
			->propertyCondition('status', 1)
			->fieldCondition('gr_kp_id', 'value', $_GET['doc_id'], '=')
			->execute();
		if (!empty($entities['node'])) {
			$node = node_load(array_shift(array_keys($entities['node'])));
			$url = 'resource/' . $node->nid;
			drupal_goto($url);
		}
		else {
			// Not a valid node.
			drupal_not_found();
		}
	}
	else {
		// No orc_id(__kp_ID) provided.
		drupal_goto('resources');
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gbif_resource_form_resource_node_form_alter(&$form, &$form_state) {
	$form['gr_kp_id']['#disabled'] = TRUE;
	$form['gr_number_of_downloads']['#disabled'] = TRUE;
}

function _gr_required_tables() {
	$tables = array(
		'gbif_ims_country',
		'gbif_ims_file',
		'gbif_ims_file_cluster',
		'gbif_ims_file_cluster_type',
		'gbif_ims_file_event_access_category',
		'gbif_ims_file_file_cluster',
		'gbif_ims_file_group',
		'gbif_ims_file_keyword',
		'gbif_ims_file_path',
		'gbif_ims_file_resource_tree',
		'gbif_ims_file_type',
		'gbif_ims_keyword',
		'gbif_ims_keyword_keyword_type',
		'gbif_ims_keyword_language',
		'gbif_ims_keyword_type',
		'gbif_ims_language',
		'gbif_ims_resource_tree',
		'gbif_ims_resource_tree_language',
		'gbif_ims_resource_type',
		'gbif_ims_resource_type_language',
	);
	return $tables;
}

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function gbif_resource_help($path, $arg) {
	switch ($path) {
		case "admin/help#gbif_resource":
			return '<p>' . t("This module redirects old style URLs(www.gbif.org/orc/?doc_id=1300)."). '</p>';
	}
}

/**
 * Implements hook_theme().
 */
function gbif_resource_theme($existing, $type, $theme, $path) {
	$path = drupal_get_path('module', 'gbif_resource');
	return array(
		'node__resource' => array(
			'template' => 'node--resource',
			'path' => $path . '/theme',
		),
		'node__view__resources' => array(
			'template' => 'node--view--resources',
			'path' => $path . '/theme',
		),
    'publishing_data__resources' => array(
      'template' => 'publishing-data--resources',
      'path' => $path . '/theme',
    ),
	);
}

/**
 *  Implements hook_theme_registry_alter().
 */
function gbif_resource_theme_registry_alter(&$theme_registry) {
	$theme_registry['views_view__resources__page']['template'] = 'views-view--resources--page';
	$theme_registry['views_view__resources__page']['path'] = drupal_get_path('module', 'gbif_resource') . '/theme';
	$theme_registry['views_view__resources_search__page']['template'] = 'views-view--resources-search--page';
	$theme_registry['views_view__resources_search__page']['path'] = drupal_get_path('module', 'gbif_resource') . '/theme';
	$theme_registry['views_view_fields__resources_search__page']['path'] = drupal_get_path('module', 'gbif_resource') . '/theme';
	$theme_registry['views_view_unformatted__resources__featured_block']['path'] = drupal_get_path('module', 'gbif_resource') . '/theme';
	$theme_registry['views_view_unformatted__resources__block_docs']['path'] = drupal_get_path('module', 'gbif_resource') . '/theme';
  $theme_registry['views_view_unformatted__resources__page_publishing']['path'] = drupal_get_path('module', 'gbif_resource') . '/theme';
}

/**
 * Implements hook_preprocess_page().
 */
function gbif_resource_preprocess_page(&$variables) {
	// Detect individual node page and node type is "resource"
	if (isset($variables['node']) && $variables['node']->type == 'resource' && isset($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs'])) {
		// We set a special class on the menu item to be consistent with http://www.gbif.org/occurrence/142316978/verbatim.
		// Find the registered menu item and add the "back-menu" CSS class to the attributes
		$highlighted_path = 'resources';
		foreach ($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'] as $k => $tab) {
			if (gettype($k) == 'integer') {
				if ($tab['#href'] == $highlighted_path) {
					// Make it active
					array_push($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'][$k]['#attributes']['class'], 'back-menu');
					// To change the title to "Resource"(singular) for individual resource pages.
					// $variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'][$k]['#title'] = t('Resource');
					watchdog('gbif_resource', 'Active detail menu item set for node.', NULL, WATCHDOG_DEBUG);
				}
			}
		}
	}
}

/**
 * Implements hook_preprocess_node().
 */
function gbif_resource_preprocess_node(&$variables) {
	if ($variables['type'] == 'resource') {
		$resource_type = $variables['gr_resource_type'][0]['taxonomy_term']->name;
		switch ($resource_type) {
			case 'Document':
			case 'Presentation':
				// For these two types, we alter the gr_file field to say "Download" and make the image the download link, too.
				$lang_code = gbif_tweaks_get_language_code('node', 'gr_file', $variables['node']->language);
				$variables['node']->gr_file[$lang_code][0]['description'] = t('Download');
				break;
			case 'Link':
			case 'Tool':
				// For these two types, we alter the gr_url field to say "Go to website" and make the image the external link.
				$lang_code = gbif_tweaks_get_language_code('node', 'gr_url', $variables['node']->language);
				$url = $variables['node']->gr_url[$lang_code][0]['value'];
				$url_html = t('<a href="@url">Go to resource</a>', array('@url' => url($url)));
				//$variables['node']->gr_url[$lang_code][0]['format'] = 'full_html';
				//$variables['gr_url'][0]['format'] = 'full_html';
				//$variables['node']->gr_url[$lang_code][0]['safe_value'] = $url_html;
				//$variables['gr_url'][0]['safe_value'] = $url_html;
				$variables['content']['gr_url'][0]['#markup'] = $url_html;
				break;
		}
		// Show gr_url field only for "Link" and "Tool".
		$variables['show_gr_url'] = ( $resource_type == 'Link' || $resource_type == 'Tool') ? TRUE : FALSE;
		// Set referer URL and text for guiding user back to the previous page.
		if (empty($_SERVER['HTTP_REFERER'])) {
			$variables['referer_url'] = '/resources';
			$variables['referer_link_text'] = t('Go to resource library');
		}
		elseif (strpos($_SERVER['HTTP_REFERER'], 'resources') !== FALSE) {
			$variables['referer_url'] = $_SERVER['HTTP_REFERER'];
			$variables['referer_link_text'] = t('Back to resource library');
		}
		else {
			$variables['referer_url'] = $_SERVER['HTTP_REFERER'];
			$variables['referer_link_text'] = t('Back to previous page');
		}
		// Prepare the image thumbnail with colorbox link.
		if (!empty($variables['gr_image']) && !isset($variables['view'])) {
			$image_url = file_create_url($variables['gr_image'][0]['uri']);
			$url = parse_url($image_url);
			$path = $url['path'];
			$width = (int)$variables['gr_image'][0]['width'];
			$width = ($width >= 240) ? 240 : $width;
			$img_html = theme_image(array(
				'path' => $path,
				'width' => $width,
				'alt' => $variables['title'],
				'title' => $variables['title'],
				'attributes' => array(),
			));
			$variables['resource_image'] = '<p>' . l($img_html, $image_url, array('html' => TRUE, 'attributes' => array('class' => array('colorbox')))) . '</p>';
		}
	}
}

/**
 * Implements hook_preprocess_field().
 */
function gbif_resource_preprocess_field(&$variables) {
	if ($variables['element']['#field_name'] == 'gr_file') {
		$download_string = t('Download');
		$download_string .= (!empty($variables['items'][0]['#file']->filesize)) ? ' (' . format_bytes($variables['items'][0]['#file']->filesize) . ')' : NULL;
		$variables['items'][0]['#file']->description = $download_string;
	}
}

/**
 * Tweak themed output for the url and file icon for "featured" blocks
 * Implements hook_preprocess_views_view_field().
 */
function gbif_resource_preprocess_views_view_field(&$vars) {
  // blocks to tweak
  $applied_blocks = array('featured_block', 'block_docs', 'block_tools');

	// for gr_file
  if (in_array($vars['view']->current_display, $applied_blocks) && $vars['field']->field == 'gr_file') {
		// show this field only if the resource type is document.

		// load node object for resource type checking.
		$node = node_load($vars['row']->nid);
		$wrapper = entity_metadata_wrapper('node', $node);
		$value = $wrapper->gr_resource_type->value();
		if ($value->name == 'Document') {
			$view_field = 'field_' . $vars['field']->field;

			// check if there is a value
			if (count($vars['row']->$view_field) != 0) {
				$lang_code = $vars['row']->_field_data['nid']['entity']->language;
				$link_title = t('Download') . ' ' . $vars['row']->_field_data['nid']['entity']->gr_file[$lang_code][0]['description'];
				$link_path = 'system/files_force' . substr($vars['row']->_field_data['nid']['entity']->gr_file[$lang_code][0]['uri'], 8); // Strip off file schema.
				$img = theme_image(
					array(
						'path' => drupal_get_path('module', 'gbif_resource') . '/icons/download164.png',
						'width' => 16,
						'height' => 16,
						'alt' => $link_title,
						'title' => $link_title,
						'attributes' => array(
							'class' => 'file-icon',
						),
					)
				);
				$link = l($img, $link_path, array(
					'html' => TRUE,
					'attributes' => array(
						'type' => $vars['row']->_field_data['nid']['entity']->gr_file[$lang_code][0]['filemime'],
					),
					'query' => array(
						'download' => 1,
					),
				));
				$vars['output'] = '<span class="file">' . $link . '</span>';
			}
			else {
				$vars['output'] = '';
			}
		}
		else {
			$vars['output'] = '';
		}
  }

  // for gr_url
  if (in_array($vars['view']->current_display, $applied_blocks) && $vars['field']->field == 'gr_url') {
		$node = node_load($vars['row']->nid);
		$wrapper = entity_metadata_wrapper('node', $node);
		$value = $wrapper->gr_resource_type->value();
		if ($value->name == 'Tool') {
			$view_field = 'field_' . $vars['field']->field;

			// check if there is a value
			if (count($vars['row']->$view_field) != 0) {
				$lang_code = $vars['row']->_field_data['nid']['entity']->language;
				$link_title = $vars['row']->_field_data['nid']['entity']->title;
				$link_path = $vars['row']->field_gr_url[0]['raw']['value'];
				$img = theme_image(
					array(
						'path' => drupal_get_path('module', 'gbif_resource') . '/icons/external16.png',
						'width' => 16,
						'height' => 16,
						'alt' => $link_title,
						'title' => $link_title,
						'attributes' => array(
							'class' => 'external-link-icon',
						),
					)
				);
				$link = l($img, $link_path, array(
					'html' => TRUE,
					'attributes' => array(
						'target' => '_blank',
					),
				));
				$vars['output'] = '<span class="external-link">' . $link . '</span>';
			}
			else {
				$vars['output'] = '';
			}
		}
		else {
			$vars['output'] = '';
		}
	}
}

/**
 * Implements hook_preprocess_views_view().
 */
function gbif_resource_preprocess_views_view(&$variables) {
	if (isset($variables) && $variables['view']->name == 'resources_search') {
		// Define our own template.
		$variables['theme_hook_suggestions'][] = 'views_view__resources_search__page';

		// Result count.
		$variables['result_count'] = format_plural(
			$variables['view']->total_rows,
			'1 result',
			'@count results',
			array()
		);

		// Render blocks.
		$variables['facet_resource_type'] = render(_block_get_renderable_array(_block_render_blocks(array(block_load('facetapi', 'xvKA0HJVTNwngnlCE9lJP4T0CXA1Gn27')))));
		$variables['facet_purpose'] = render(_block_get_renderable_array(_block_render_blocks(array(block_load('facetapi', '731qYYP4XLCpEqbjDPEBHvO3Ms6QiFhq')))));
		$variables['facet_language'] = render(_block_get_renderable_array(_block_render_blocks(array(block_load('facetapi', '91UEW2NE4L9KDBz5SLgpe0fiDQZM19OU')))));
		$variables['facet_data_type'] = render(_block_get_renderable_array(_block_render_blocks(array(block_load('facetapi', 'HeCqQSNM4pCh581hH4Aq8jlEIwdyvby7')))));
		$variables['facet_tags'] = render(_block_get_renderable_array(_block_render_blocks(array(block_load('facetapi', 'pzzwZNEBzrHCFGRYawMltoa8YO8JmT3n')))));
		$variables['exp_widgets'] = render(module_invoke('views', 'block_view','-exp-resources_search-page'));
		$variables['featured_block'] = render(module_invoke('views', 'block_view','resources-featured_block'));
	}
}

/**
 * Theme facet inactive links in our way.
 */
function gbif_resource_theme_link($variables) {
	$link_html = '<a href="' . check_plain(url($variables['path'], $variables['options'])) . '"' . drupal_attributes($variables['options']['attributes']) . '>' . ($variables['options']['html'] ? $variables['text'] : check_plain($variables['text'])) . '</a>';
	if (isset($variables['count'])) {
		$link_html .= '<span class="facet-count">' . theme('facetapi_count', $variables) . '</span>';
	}
	return $link_html;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gbif_resource_form_alter(&$form, &$form_state, $form_id) {
	switch ($form_id) {
		case 'views_exposed_form':
			$form['search_api_views_fulltext']['#suffix'] = '<span class="glyphicon glyphicon-search resource-magnifier"></span>';
			array_unshift($form['#validate'], 'gbif_resource_views_exposed_form_validate_handler');
			break;
	}
}

/**
 * Detect checked facets and put it back when sorting is changed.
 * @see http://drupal.stackexchange.com/questions/93730/is-there-a-way-to-create-a-sort-option-for-search-results-that-works-together-wi
 * @see https://www.drupal.org/node/1254156#comment-5594274
 */
function gbif_resource_views_exposed_form_validate_handler(&$form, &$form_state) {
	foreach ($form_state['input'] as $input_key => $value) {
		// If there is an argument in input that is not in the keys of the form
		// then that argument must be added as a hidden field to the form.
		if (!isset($form[$input_key])) {
			gbif_resource_param_from_array($form, $input_key, $input_key, $value);
		}
	}
}

/**
 * Converts an array that was previously parsed from the url arguments
 * to an array of hidden values that will be added to the form so these arguments
 * are not lost in form submission.
 *
 * @see https://www.drupal.org/sandbox/pl2/1438442
 *
 * Thanks to Pedro Lozano. https://www.drupal.org/project/user/123766.
 */
function gbif_resource_param_from_array(&$form, $root_key, $key, $value, $array_key = '') {
	if (!is_array($value)) {
		$form[$key] = array(
			'#type' => 'hidden',
			'#value' => $value,
			'#name' => "$root_key$array_key",
		);
	}
	else {
		$form[$key] = array();
		foreach ($value as $val_key => $val_value) {
			gbif_resource_param_from_array($form[$key], $root_key, $val_key, $val_value, $array_key . "[$val_key]");
		}
	}
}

/**
 * Implements hook_facet_items_alter().
 * We use this hook to show the attribute of a tag.
 * This requires "Rewrite facet items via callback function" be active and is
 * dependent on facetapi_bonus module.
 */
function gbif_resource_facet_items_alter(&$build, &$settings) {
	if ($settings->facet == 'tx_tags') {
		foreach($build as $key => $item) {
			$term = taxonomy_term_load($key);
			if (count($term->field_term_attributes) > 0) {
				$lang_code = 'und'; // @todo To find a proper way to load language code.
				$attribute_term = taxonomy_term_load($term->field_term_attributes[$lang_code][0]['tid']);
				$acronym = $attribute_term->field_term_acronym[$lang_code][0]['value'];
				$build[$key]["#markup"] = $acronym . ': ' . $item["#markup"];
			}
			unset($term, $attribute_term);
		}
	}
}

/**
 * Check the resource type so we can decide to show external link or not.
 * @param $tid
 * @return bool
 */
function _gr_in_type_w_link($tid) {
	$type_w_link = array('Link', 'Tool');
	$query = new EntityFieldQuery();
	$entities = $query->entityCondition('entity_type', 'taxonomy_term')
		->entityCondition('bundle', 'resource_type')
		->propertyCondition('name', $type_w_link, 'IN')
		->execute();
	return (isset($entities['taxonomy_term'][$tid])) ? TRUE : FALSE;
}

/**
 * Determine whether to show the "featured resources" block according to the
 * existence of query params.
 */
function gbif_resource_show_featured_resources() {
	$query = drupal_get_query_parameters();
	if (count($query) > 0 && !isset($query['XDEBUG_SESSION_START'])) {
		return FALSE;
	}
	elseif ($_GET['searched'] == 1 || $_GET['hideFeatured'] == 1) {
		return FALSE;
	}
	else {
		return TRUE;
	}
}

function gbif_resource_publishing_data() {
  drupal_add_library('gbif_resource', 'lp');
  return theme('publishing_data__resources');
}