<?php
/**
 * @file
 * This module creates allows to create URLs like www.gbif.org/orc/?doc_id=1300, used in the GBIF website since 2011.
 */

module_load_include('inc', 'gbif_resource', 'gbif_resource.filemaker');

// @todo Redirection of old Drupal node ID.
// @todo Force file download. Settings in fields.

/**
 * @file
 * Code for the GBIF Resource feature.
 */

include_once 'gbif_resource.features.inc';

/**
 * Implements hook_menu().
 */
function gbif_resource_menu() {
	$items = array();
	$items['orc'] = array(
		'title' => t('Redirect'),
		'page callback' => 'gbif_resource_orc_redirect',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['resources/%'] = array(
		'title' => t('Old Drupal resource redirect'),
		'description' => 'Redirect old Drupal resource to the current one.',
		'page callback' => 'gbif_resource_redirect',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['admin/config/gbif/resource'] = array(
		'title' => 'GBIF resource',
		'description' => t('Configure GBIF resource related features.'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('gbif_resource_settings_form'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'gbif_resource.admin.inc',
	);
	return $items;
}

/**
 * Implementation of hook_views_api().
 */
function gbif_resource_views_api() {
	return array(
		'api' => 3.0,
		'path' => drupal_get_path('module', 'gbif_event') . '/views',
		'template path' => drupal_get_path('module', 'gbif_event' . '/theme'),
	);
}

/**
 * Implements hook_theme().
 */
function gbif_resource_theme($existing, $type, $theme, $path) {
	$path = drupal_get_path('module', 'gbif_resource');
	return array(
		'node__resource' => array(
			'template' => 'node--resource',
			'path' => $path . '/theme',
		),
		'node__view__resources' => array(
			'template' => 'node--view--resources',
			'path' => $path . '/theme',
		),
	);
}

/**
 *
 */
function gbif_resource_redirect() {

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gbif_resource_form_resource_node_form_alter(&$form, &$form_state) {
	$form['gr_kp_id']['#disabled'] = TRUE;
	$form['gr_number_of_downloads']['#disabled'] = TRUE;
}

function gbif_resource_sync_ui($form, $form_state) {
	if (!empty($form_state['values']['cron_reset'])) {
		variable_set('gbif_ims_sync_next_execution', 0);
	}

	if (time() >= variable_get('gbif_ims_sync_next_execution', 0)) {
		return gbif_resource_sync();
	}
	else {
		$next_time = variable_get('gbif_ims_sync_next_execution');
		watchdog('gbif_resource', "Resource update didn't run because current interval is not expired yet. Next run is at %next.", array('%next' => date_iso8601($next_time)), WATCHDOG_INFO);
		return t("Resource update didn't run because current interval is not expired yet. Next run is at %next.", array('%next' => date_iso8601($next_time)));
	}

}

function gbif_resource_sync() {
	$start_time = new DateTime();
	$sync_success = _gbif_resource_sync();
	$end_time = new DateTime();
	$time = $end_time->diff($start_time);
	$time_spent = "This task took ";
	if ($time->y > 0) {$time_spent .= $time->y.' years, ';}
	if ($time->m > 0) {$time_spent .= $time->m.' months, ';}
	if ($time->d > 0) {$time_spent .= $time->d.' days, ';}
	if ($time->h > 0) {$time_spent .= $time->h.' hours, ';}
	if ($time->i > 0) {$time_spent .= $time->i.' minutes, ';}
	if ($time->s > 0) {$time_spent .= $time->s.' seconds ';}
	$time_spent .= "to complete.";

	// Should examine the result before informing via the UI.
	if ($sync_success == TRUE) {
		watchdog('gbif_resource', 'Resource update executed at %time', array('%time' => date_iso8601(time(0))), WATCHDOG_INFO);
		$interval = variable_get('gbif_ims_sync_interval', 3 * 60 * 60);
		variable_set('gbif_ims_sync_next_execution', time() + $interval);
		return t('Synchronisation finished.') . ' ' . $time_spent;
	}
	else {
		watchdog('gbif_resource', 'IMS synchronisation failed at %time', array('%time' => date_iso8601(time(0))), WATCHDOG_CRITICAL);
		return t('Resource updated.') . ' ' . $time_spent;
	}
}

function _gr_required_tables() {
	$tables = array(
		'gbif_ims_country',
		'gbif_ims_file',
		'gbif_ims_file_cluster',
		'gbif_ims_file_cluster_type',
		'gbif_ims_file_event_access_category',
		'gbif_ims_file_file_cluster',
		'gbif_ims_file_group',
		'gbif_ims_file_keyword',
		'gbif_ims_file_path',
		'gbif_ims_file_resource_tree',
		'gbif_ims_file_type',
		'gbif_ims_keyword',
		'gbif_ims_keyword_keyword_type',
		'gbif_ims_keyword_language',
		'gbif_ims_keyword_type',
		'gbif_ims_language',
		'gbif_ims_resource_tree',
		'gbif_ims_resource_tree_language',
		'gbif_ims_resource_type',
		'gbif_ims_resource_type_language',
	);
	return $tables;
}

/**
 * Handling the redirection of the old style URLs of ORC.
 */
function gbif_resource_orc_redirect() {
	if ((isset($_GET['doc_id'])) && ($_GET['doc_id'] != '')) {
		// Find if a resource_ims exists with the __kp_ID registered.
		$query = new EntityFieldQuery();
		$entities = $query->entityCondition('entity_type', 'node')
			->propertyCondition('type', 'resource_ims')
			->propertyCondition('status', 1)
			->fieldCondition('field_orc_original_ims_id', 'value', $_GET['doc_id'], '=')
			->execute();
		if (!empty($entities['node'])) {
			$node = node_load(array_shift(array_keys($entities['node'])));
			$url = 'resources/' . $node->nid;
			drupal_goto($url);
		}
		else {
			// Not a valid node.
			drupal_not_found();
		}
	}
	else {
		// No orc_id(__kp_ID) provided.
		drupal_goto('resources/summary');
	}
}

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function gbif_resource_help($path, $arg) {
	switch ($path) {
		case "admin/help#gbif_resource":
			return '<p>' . t("This module redirects old style URLs(www.gbif.org/orc/?doc_id=1300)."). '</p>';
			break;
	}
}