<?php
/**
 * @file
 * Code for the GBIF Scaled Contents feature.
 */

include_once 'gbif_scaled_contents.features.inc';

/**
 * Implements hook_menu().
 */
function gbif_scaled_contents_menu() {
  $items = array();
  // Menu link for full list browsing.
  $items['newsroom/summary'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'GBIF News',
    'page callback' => 'gbif_scaled_contents_page_summary',
    'access callback' => TRUE,
    'weight' => -30,
  );
  return $items;
}

function gbif_scaled_contents_page_summary() {
  // build newsroom/summary
  $markup = '';
  $markup .= views_embed_view('news_slideshow', 'default');
  $markup .= views_embed_view('data_use', 'latest3');
  $markup .= views_embed_view('news', 'latest3');
  return $markup;
}

/**
 * Implements hook_page_build().
 */
function gbif_scaled_contents_page_build(&$page) {
  // determine title and slogan in banner
  $current_path = current_path();
  if (drupal_match_path($current_path, 'node/82810') !== FALSE) {
    $page['highlighted_title'] = array(
      'name' => t('Featured research'),
      'description' => t('Citations of selected recent peer-reviewed research making substantive use of GBIF-mediated data'),
    );
  }

}


/**
 * Implements hook_theme().
 */
function gbif_scaled_contents_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'gbif_scaled_contents');
  return array(
    'node__news' => array(
      'template' => 'node--news',
      'path' => $path . '/theme',
    ),
    'node__view__news__latest1_fp' => array(
      'template' => 'node--view--news--latest1-fp',
      'path' => $path . '/theme'
    ),
    'node__view__news__latest3' => array(
      'template' => 'node--view--news--latest3',
      'path' => $path . '/theme'
    ),
    'node__view__news' => array(
      'template' => 'node--view--news',
      'path' => $path . '/theme'
    )
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function gbif_scaled_contents_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'gbif_scaled_contents');
  $theme_registry['views_view__news__latest1_fp']['path'] = $path . '/theme';
  $theme_registry['views_view__news__latest3']['path'] = $path . '/theme';
  $theme_registry['views_view__news__latest4_fp']['path'] = $path . '/theme';
  $theme_registry['views_view__news__page']['preprocess functions'][] = 'gbif_scaled_contents_preprocess_views_view';
  $theme_registry['views_view__news__page']['path'] = $path . '/theme';
}

/**
 * Implements hook_preprocess_views_view().
 */
function gbif_scaled_contents_preprocess_views_view(&$variables) {
  switch ($variables['view']->name) {
    case 'news':
      $region = arg(2);
      $feed_url = (!empty($region)) ? '/newsroom/news/rss/' . $region : '/newsroom/news/rss';
      // Add RSS feed icon.
      $alt = $variables['view']->get_title();
      $icon = theme_image(array(
        'path' => drupal_get_path('theme', 'bvng') . '/images/rss-feed.gif',
        'width' => 28,
        'height' => 28,
        'alt' => $alt,
        'title' => t('Subscribe to this list'),
        'attributes' => array(),
      ));
      $icon = l($icon, $feed_url, array('html' => TRUE));
      $variables['feed_icon'] = $icon;
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function gbif_scaled_contents_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('news_node_form', 'data_use_node_form', 'dataset_node_form'))) {
    $form['field_legacy_nid']['#disabled'] = TRUE;
    $form['#group_children']['twitter'] = 'group_social_media';
    $form['twitter']['#group'] = 'group_social_media';
    $form['language']['#required'] = TRUE;
    if (isset($form['language']['#default_value']) && $form['language']['#default_value'] == 'und') {
      $form['language']['#default_value'] = NULL;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 * Make sure that our form alter is called AFTER the same hook provided in twitter
 */
function gbif_scaled_contents_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move my_module_rdf_mapping() to the end of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['gbif_scaled_contents'];
    unset($implementations['gbif_scaled_contents']);
    $implementations['gbif_scaled_contents'] = $group;
  }
}

/**
 * Implements hook_node_presave().
 * @see http://drupal.stackexchange.com/questions/39591/how-to-stop-drupal-for-setting-node-changed-date-on-creation
 */
function gbif_scaled_contents_node_presave($node) {
  if (!empty($node->legacy_node_changed)) {
    $node->changed = $node->legacy_node_changed;
  }
  if (!empty($node->legacy_node_created)) {
    $node->created = $node->legacy_node_created;
  }
  // Pathauto
  if (!empty($node->legacy_node_path)) {
    $node->path['pathauto'] = 0;
    $node->path['alias'] = $node->legacy_node_path;
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function gbif_scaled_contents_preprocess_page(&$variables) {
  $path_to_highlight = 'newsroom/news';
  $args = arg();

  // Detect the URLs that needs "News" highlighted.
  // Note that for the block to be available, "news_node_menu" context is required.
  if (isset($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs'])) {
    // for individual content node that is typed "news"
    if (isset($variables['node']) && $variables['node']->type == 'news') {
      // Currently we set active on the menu item that has the path as $path_to_highlight
      // find the registered menu item and add the "active" CSS class to the attributes
      foreach ($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'] as $k => $tab) {
        if (gettype($k) == 'integer') {
          if ($tab['#href'] == $path_to_highlight) {
            // make it active
            array_push($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'][$k]['#attributes']['class'], 'active');
            watchdog('gbif_scaled_contents', 'Active menu item set for news node.', NULL, WATCHDOG_DEBUG);
          }
        }
      }
    }
    // for news views
    elseif ($args[0] == 'newsroom' && $args[1] == 'news' && !empty($args[2])) {
      // find the registered menu item and add the "active" CSS class to the attributes
      foreach ($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'] as $k => $tab) {
        if (gettype($k) == 'integer') {
          if ($tab['#href'] == $path_to_highlight) {
            // make it active
            array_push($variables['page']['menu']['menu_block_gbif_navigation_menu_tabs']['#content'][$k]['#attributes']['class'], 'active');
            watchdog('gbif_scaled_contents', 'Active menu item set for news views.', NULL, WATCHDOG_DEBUG);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function gbif_scaled_contents_preprocess_node(&$variables) {
  $node_type = (isset($variables)) ? $variables['node']->type : NULL;
  $content = $variables['content'];

  // Fields for various blocks.
  $footer_fields = array(
    'field_citation_information',
    'field_related_gbif_resources',
  );
  $sidebar_fields = array(
    'field_researcher_location',
    'field_study_area',
    'field_data_source',
    'field_link_to_research',
    'field_dataset_uuid',
    'field_num_rs_used',
  );
  $tags_fields = array(
    'field_gbif_area',
    'field_country',
    'tx_about_gbif',
    'tx_capacity_enhancement',
    'tx_audience',
    'tx_data_use',
    'tx_informatics',
    'field_tx_data_type',
    'field_tx_purpose',
    'tx_topic',
    'tx_tags',
  );
  $node_wrapper = entity_metadata_wrapper('node', $variables['node']);

  if (in_array($node_type, array('news', 'data_use', 'dataset')) && !isset($variables['view'])) {
    // generating HTML for sidebar fields
    $sidebar = '';

    // for news, we add publication date and last updated on the top of the sidebar
    if (in_array($node_type, array('news'))) {
      $sidebar .= _gbif_scaled_contents_sidebar_dates($variables['node']);
    }

    foreach ($sidebar_fields as $sidebar_field) {
      $sidebar .= render($content[$sidebar_field]);
    }
    $variables['sidebar'] = $sidebar;

    // generating HTML for footer fields
    $node_footer = '';
    foreach ($footer_fields as $footer_field) {
      $node_footer .= render($content[$footer_field]);
    }
    $variables['node_footer'] = $node_footer;

    // generating HTML for Tags and attach to the sidebar
    $tag_items = array();
    $tag_links = array();
    foreach ($tags_fields as $tag_field) {
      if (isset($content[$tag_field])) {
        foreach ($content[$tag_field] as $attr => $value) {
          if ($attr === '#items') {
            foreach ($content[$tag_field][$attr] as $item) {
              $tag_items[] = $item;
            }
          }
          elseif (is_numeric($attr)) {
            $tag_links[] = $content[$tag_field][$attr];
          }
        }
      }
    }

    // attach a manually-made field render array for the Tags field
    if (count($tag_items) > 0) {
      $tx_tags_collection = array(
        '#theme' => 'field',
        '#weight' => 50,
        '#title' => 'Tags',
        '#access' => true,
        '#label_display' => 'above',
        '#view_mode' => 'full',
        '#language' => 'und',
        '#field_name' => 'tx_tags_collection',
        '#field_type' => 'taxonomy_term_reference',
        '#field_translatable' => '0',
        '#entity_type' => 'node',
        '#bundle' => $node_type,
      );

      $tx_tags_collection['#items'] = $tag_items;
      $tx_tags_collection = array_merge($tx_tags_collection, $tag_links);
      $variables['sidebar'] .= render($tx_tags_collection);
    }
  }

  // for views, we provide "also tagged".
  if (isset($variables['node']) && in_array($variables['node']->type, array('news', 'data_use'))) {
    // Get also tagged
    $variables['also_tagged'] = _gbif_scaled_contents_get_also_tag_links($variables['node']);
  }
}

function _gbif_scaled_contents_sidebar_dates($node = NULL) {
  $markup = '';
  if (is_object($node)) {

    // fields that we get contents from
    $fields = array(
      'publication-date' => array(
        'title' => t('Publication date'),
        'machine_name' => 'created',
        'field_type' => 'node_date',
      ),
      'last-updated' => array(
        'title' => t('Last updated'),
        'machine_name' => 'changed',
        'field_type' => 'node_date',
      ),
    );
    foreach ($fields as $idx => $field) {
      $variable_name = str_replace('-', '_', $idx);
      $$variable_name = array(
        'title' => $field['title'],
        'type' => 'ul',
        'items' => array(),
        'attributes' => array(
          'id' => $idx,
          'class' => $node->type . '-sidebar' . ' ' . $idx,
        ),
      );
      $item_list = &$$variable_name;

      switch ($field['field_type']) {
        case 'node_date':
          array_push($item_list['items'], array('data' => format_date($node->$field['machine_name'], 'custom', 'F jS, Y ')));
          break;
      }
      $markup .= theme_item_list($item_list);
    }
  }
  return $markup;
}

/**
 * Helper function to get "also tagged" tag links.
 */
function _gbif_scaled_contents_get_also_tag_links($node) {
  $term_sources = _gbif_scaled_contents_sidebar_tags_definition();

  // Get all the terms.
  if (isset($term_sources)) {
    foreach ($term_sources as $term_source) {
      $items = field_get_items('node', $node, $term_source);
      if (is_array($items)) {
        foreach ($items as $item) {
          $terms[] = $item['tid'];
        }
      }
    }
    $item_list = array(
      'items' => array(),
    );

    _gbif_scaled_contents_get_tag_links($terms, $item_list);

    $term_links = '';

    if (!empty($item_list['items'])) {
      $term_links = t('Also tagged') . ':' . '<ul class="also-tagged">';
      foreach ($item_list['items'] as $tag_link) {
        $term_links .= '<li>' . $tag_link['data'] . '</li>';
      }
      $term_links .= '</ul>';
    }
    return $term_links;
  }

  return '';
}

function _gbif_scaled_contents_get_tag_links(&$field_items, &$item_list) {
  $terms = taxonomy_term_load_multiple($field_items);
  foreach ($terms as $term) {
    $uri = taxonomy_term_uri($term);
    $tag_link = l($term->name, $uri['path']);
    array_push($item_list['items'], array('data' => $tag_link));
  }
}

function _gbif_scaled_contents_sidebar_tags_definition() {
  return array(
    'field_gbif_area',
    'field_country',
    'tx_about_gbif',
    'tx_capacity_enhancement',
    'tx_audience',
    'tx_data_use',
    'tx_informatics',
    'field_tx_data_type',
    'field_tx_purpose',
    'tx_topic',
    'tx_tags',
  );
}

/**
 * Utility function to generate the array for taxonomy terms mapping.
 */
function drush_gbif_scaled_contents_tx_generate() {
  $terms = taxonomy_get_tree(30);
  echo 'array(' . "\n";
  foreach ($terms as $term) {
    echo '  array(' . "\n";
    echo "    'name' => '" . $term->name . "',\n";
    echo "    'old_tid' => " . $term->tid . ",\n";
    echo "    'new_tid' => NULL,\n";
    echo "  ),\n";
  }
  echo ");\n";
}

/**
 * Implements hook_views_pre_build().
 * For altering views title.
 */
function gbif_scaled_contents_views_pre_build(&$view) {
  if ($view->current_display == 'json_bid') {
    if (count($view->args) > 0) {
      $rss_titles = array(
        'fr' => '',
        'pt' => '',
        'es' => '',
      );
      switch ($view->args[0]) {
        case 'fr':
        case 'FR':
          break;
        case 'pt':
        case 'PT':
          break;
        case 'es':
        case 'ES':
          break;
      }
    }
  }
}

/**
 * Implements hook_path_update().
 * To add a language-neutral entry to ensure URL alias works with language specified.
 */
function gbif_scaled_contents_path_update($path) {
  // Check if an entry with the same language exists.
  // And check if this is an update to an entry.
  if (!in_array($path['language'], array('und', 'en'))) {
    if ($path['alias'] == $path['original']['alias']) {
      $result = db_select('url_alias', 'ua')
        ->fields('ua', array('pid'))
        ->condition('alias', $path['alias'])
        ->condition('language', 'und')
        ->execute()
        ->rowCount();

      if (!$result) {
        $data = array(
          'source' => $path['source'],
          'alias' => $path['alias'],
          'language' => 'und',
        );
        drupal_write_record('url_alias', $data);
      }
    }
    // If new URL alias is different.
    else {
      $result = db_select('url_alias', 'ua')
        ->fields('ua', array('pid'))
        ->condition('alias', $path['original']['alias'])
        ->condition('language', 'und')
        ->execute()
        ->fetchAssoc();

      if (!$result) {
        $data = array(
          'source' => $path['source'],
          'alias' => $path['alias'],
          'language' => 'und',
        );
        drupal_write_record('url_alias', $data);
      }
      // Update the existing one.
      else {
        $updated = db_update('url_alias')
          ->fields(array(
            'alias' => $path['alias'],
            'language' => 'und',
          ))
          ->condition('pid', $result['pid'])
          ->execute();
      }
    }
  }
  else {
    $result = db_select('url_alias', 'ua')
      ->fields('ua', array('pid'))
      ->condition('alias', $path['alias'])
      ->condition('language', 'und')
      ->execute()
      ->fetchAssoc();

    if (!empty($result)) {
      // Only delete the LANGUAGE_NONE URL alias for multilingual enabled content types.
      $path_elements = explode('/', $path['source']);
      $nid = $path_elements[1];
      $node = node_load($nid);
      if (in_array($node->type, array('news', 'data_use', 'dataset'))) {
        $deleted = db_delete('url_alias')
          ->condition('pid', $result['pid'])
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_path_insert().
 */
function gbif_scaled_contents_path_insert($path) {
  if (!in_array($path['language'], array('und', 'en'))) {
    $data = array(
      'source' => $path['source'],
      'alias' => $path['alias'],
      'language' => 'und',
    );
    drupal_write_record('url_alias', $data);
  }
}

/**
 * Implements hook_path_delete().
 */
function gbif_scaled_contents_path_delete($path) {
  $result = db_select('url_alias', 'ua')
    ->fields('ua', array('pid'))
    ->condition('alias', $path['alias'])
    ->condition('language', 'und')
    ->execute()
    ->fetchAssoc();

  if (!empty($result)) {
    $deleted = db_delete('url_alias')
      ->condition('pid', $result['pid'])
      ->execute();
  }
}