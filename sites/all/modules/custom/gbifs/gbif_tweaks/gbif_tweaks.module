<?php

function gbif_tweaks_menu() {
	$items['admin/config/gbif'] = array(
		'title' => 'GBIF Configuration',
		'description' => t('Configure settings that determine how this Drupal site presents itself as the GBIF Portal.'),
		'position' => 'right',
		'weight' => -10,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);
	return $items;
}

/**
 * Implements hook_date_format_types().
 */
/**
 * Implements hook_date_format_types().
 */
function gbif_tweaks_date_format_types() {
  return array(
    'mmm_yyyy' => t('Sep 2015'),
  );
}

/**
 * Implements hook_date_formats().
 */
function gbif_tweaks_date_formats() {
  return array(
    array(
      'type' => 'Sep 2015',
      'format' => 'M Y',
      'locales' => array()
    ),
  );
}

/**
 * Mainly a wrapper function that adds elapsed time to the result.
 *
 * @param $task
 *   The AJAX callback of the actual task that returns a $result array
 *   containing the following elements:
 *     'success': (boolean) whether the task completes or not.
 *     'message': (string) the message explaining the result.
 *
 * @todo To go though all task functions and check whether they give 'success' faithfully.
 */
function gbif_tweaks_task_wrapper($task) {
	$start_time = new DateTime();
	$result = $task();
	$end_time = new DateTime();
	$time = $end_time->diff($start_time);
	$time_spent = "This task took ";
	if ($time->y > 0) {$time_spent .= $time->y.' years, ';}
	if ($time->m > 0) {$time_spent .= $time->m.' months, ';}
	if ($time->d > 0) {$time_spent .= $time->d.' days, ';}
	if ($time->h > 0) {$time_spent .= $time->h.' hours, ';}
	if ($time->i > 0) {$time_spent .= $time->i.' minutes, ';}
	if ($time->s > 0) {$time_spent .= $time->s.' seconds ';}
	$time_spent .= "to complete.";

	// Should examine the result before informing via the UI.
	return $result['message'] . ' ' . $time_spent;
}

function gbif_tweaks_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry)) {
    unset($theme_registry['image_field_caption']['template']);
    unset($theme_registry['image_field_caption']['theme path']);
    $theme_registry['image_field_caption']['function'] = 'gbif_tweaks_image_caption_format';
  }
}

function gbif_tweaks_image_caption_format($variables) {
  $output = $variables['image'];
  $output .= '<div class="' . $variables['classes'] . '">' . $variables['caption'] . '</div>';
  return $output;
}
/**
 * Create or remove redirects.
 * @param $module
 *   Which module to look for the list of redirects.
 * @param $mode
 *   "Create" or "remove" redirects.
 */
function gbif_tweaks_redirects_handling($module, $mode) {
	$list = $module . '_redirection_list';
	$redirections = $list();
	switch ($mode) {
		case 'create':
			foreach ($redirections as $redirection) {
				$redirect = new stdClass();
				redirect_object_prepare(
					$redirect,
					array(
						'source' => $redirection['old'],
						'source_options' => array(),
						'redirect' => $redirection['new'],
						'redirect_options' => array(),
						'language' => LANGUAGE_NONE,
						'status_code' => 0, // Redirect Status, 0 is default
						'type' => 'redirect',
					)
				);
				redirect_save($redirect);
			}
			break;
		case 'remove':
			$rids = array();
			foreach ($redirections as $redirection) {
				$query = new EntityFieldQuery();
				$entities = $query->entityCondition('entity_type', 'redirect')
					->propertyCondition('source', $redirection['old'], '=')
					->execute();
				if (!empty($entities['redirect'])) {
					$rids[] = key($entities['redirect']);
				}
			}
			redirect_delete_multiple($rids);
			break;
	}
}

/**
 * @param $entity_type
 * @param $field_name
 * @param $bundle_name
 */
function gbif_tweaks_field_export($entity_type, $field_name, $bundle_name) {
	$info_config = field_info_field($field_name);
	$info_instance = field_info_instance($entity_type, $field_name, $bundle_name);
	unset($info_config['id']);
	unset($info_instance['id'], $info_instance['field_id']);
	ksort($info_config);
	ksort($info_instance);
	include_once DRUPAL_ROOT . '/includes/utility.inc';
	$output = "field_create_field(" . drupal_var_export($info_config) . ");\n";
	$output .= "field_create_instance(" . drupal_var_export($info_instance) . ");";
	drupal_set_message("<textarea rows=30 style=\"width: 100%;\">" . $output . '</textarea>');
}

function gbif_tweaks_get_data_portal_base_url() {
	$env = variable_get('environment_settings');
	return $env['data_portal_base_url'];
}

/**
 * @param (array) $node_types
 */
function gbif_tweaks_delete_all($node_types) {
	foreach ($node_types as $node_type) {
		$query = db_select('node', 'n');
		$query->addField('n', 'nid');
		$query->condition('n.type', $node_type);
		$results = $query->execute()->fetchAll();
		$node_ids = array();
		foreach ($results as $row) {
			$node_ids[] = $row->nid;
		}
		node_delete_multiple($node_ids);
	}
}

/**
 * Get language code in node form processing.
 */
function gbif_tweaks_get_language_code($entity_type, $field, $entity_language) {
	$field_info = field_info_field($field);
	if (field_is_translatable($entity_type, $field_info)) {
		$lang_code = field_valid_language($entity_language);
	} else {
		$lang_code = LANGUAGE_NONE;
	}
	return $lang_code;
}

/**
 * @param $bytes
 * @param int $precision
 * @return string
 * @see http://stackoverflow.com/questions/2510434/format-bytes-to-kilobytes-megabytes-gigabytes
 */
function format_bytes($bytes, $precision = 2) {
	$units = array('B', 'KB', 'MB', 'GB', 'TB');

	$bytes = max($bytes, 0);
	$pow = floor(($bytes ? log($bytes) : 0) / log(1024));
	$pow = min($pow, count($units) - 1);

	// Uncomment one of the following alternatives
	$bytes /= pow(1024, $pow);
	// $bytes /= (1 << (10 * $pow));

	return round($bytes, $precision) . ' ' . $units[$pow];
}

/**
 * Create module directory
 * @param null $mode
 * @param $name
 */
function gbif_tweaks_file_directories($mode = NULL, $name) {
	switch ($mode) {
		case 'create':
			// Create directories for storing relevant files for IMS resources.
			$uris = array(
				'public://' . $name
			);
			foreach ($uris as $uri) {
				$dir_exists = file_prepare_directory($uri);
				if (!$dir_exists) {
					$dir_created = drupal_mkdir($uri, NULL, TRUE);
					if ($dir_created == TRUE) {
						watchdog('gbif_tweaks', '!directory created.', array('!directory' => $uri), WATCHDOG_NOTICE);
					}
					else {
						watchdog('gbif_tweaks', '!directory creation failed.', array('!directory' => $uri), WATCHDOG_ERROR);
					}
				}
				else {
					watchdog('gbif_tweaks', '!directory already exists.', array('!directory' => $uri), WATCHDOG_WARNING);
				}
			}
			break;

		case 'delete':
			$uri = 'public://' . $name;
			$dir_exists = file_prepare_directory($uri);
			if ($dir_exists) {
				$deleted = file_unmanaged_delete_recursive($uri);
				if ($deleted == TRUE) {
					watchdog('gbif_tweaks', '!directory deleted.', array('!directory' => $uri), WATCHDOG_NOTICE);
					drupal_set_message('Module directory !directory is successfully deleted.', array('!directory' => $uri));
				}
			}
			break;
	}
}

/**
 * Temporary fix for entityreference module to Drupal 7.39.
 * @see https://www.drupal.org/node/2554553#comment-10254987
 * @param $type
 */
function gbif_tweaks_element_info_alter(&$type) {
  $type['entityreference']['#process'] = array(
    'entityreference_autocomplete_process_entityreference',
    'form_process_autocomplete',
    'ajax_process_form'
  );
}

/**
 * UUID generator.
 * @see http://stackoverflow.com/questions/2040240/php-function-to-generate-v4-uuid
 */
function gbif_tweaks_guidv4() {
	$data = openssl_random_pseudo_bytes(16);
	assert(strlen($data) == 16);

	$data[6] = chr(ord($data[6]) & 0x0f | 0x40); // set version to 0100
	$data[8] = chr(ord($data[8]) & 0x3f | 0x80); // set bits 6-7 to 10

	return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
}

/**
 * @param string $format
 * @param null $timestamp
 * @param null $timezone
 * @return string
 */
function gbif_tweaks_format_time($format = 'c', $timestamp = NULL, $timezone = NULL) {
	if ($timestamp == NULL) $timestamp = time();
	if ($timezone == NULL) $timezone = date_default_timezone_get();

	$datetime = new DateTime('now', new DateTimeZone($timezone));
	$datetime->setTimestamp($timestamp);
	$formatted_date = $datetime->format($format);

	return $formatted_date;
}

/**
 * Convert MB to bytes
 * @param $p_sFormatted
 * @return bool|string
 * @see http://stackoverflow.com/questions/11807115/php-convert-kb-mb-gb-tb-etc-to-bytes
 */
function gbif_tweaks_to_byte_size($p_sFormatted) {
	$aUnits = array('B' => 0, 'KB' => 1, 'MB' => 2, 'GB' => 3, 'TB' => 4, 'PB' => 5, 'EB' => 6, 'ZB' => 7, 'YB' => 8);
  $sUnit = strtoupper(trim(substr($p_sFormatted, -2)));
  if (intval($sUnit) !== 0) {
		$sUnit = 'B';
	}
  if (!in_array($sUnit, array_keys($aUnits))) {
		return false;
	}
  $iUnits = trim(substr($p_sFormatted, 0, strlen($p_sFormatted) - 2));
  if (!intval($iUnits) == $iUnits) {
		return false;
	}
  return $iUnits * pow(1024, $aUnits[$sUnit]);
}

/**
 * Helper function to get the GBIF base URL that reflects deployment environment.
 */
function gbif_portal_base_url() {
  $env = variable_get('environment_settings');
  return $env['data_portal_base_url'];
}